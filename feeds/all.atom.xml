<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>(blog-dump 'dciabrin)</title><link href="https://dciabrin.net/" rel="alternate"></link><link href="https://dciabrin.net/feeds/all.atom.xml" rel="self"></link><id>https://dciabrin.net/</id><updated>2020-09-21T09:00:00+02:00</updated><subtitle>A coding and hacking diary</subtitle><entry><title>Connecting to MariaDB with auth_ed25519 and PyMySQL</title><link href="https://dciabrin.net/posts/2020/09/connecting-to-mariadb-with-auth_ed25519-and-pymysql.html" rel="alternate"></link><published>2020-09-21T09:00:00+02:00</published><updated>2020-09-21T09:00:00+02:00</updated><author><name>Damien Ciabrini</name></author><id>tag:dciabrin.net,2020-09-21:/posts/2020/09/connecting-to-mariadb-with-auth_ed25519-and-pymysql.html</id><summary type="html">&lt;p&gt;When a MySQL client wants to connect to a MySQL or MariaDB server, the &lt;a href="https://mariadb.com/kb/en/connection/"&gt;MySQL wire protocol&lt;/a&gt;
specifies how both parties should exchange data, advertise their capabilities, and which authentication method
they should use for the client to get connected. By default, this authentication is a challenge-response
scheme that relies …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When a MySQL client wants to connect to a MySQL or MariaDB server, the &lt;a href="https://mariadb.com/kb/en/connection/"&gt;MySQL wire protocol&lt;/a&gt;
specifies how both parties should exchange data, advertise their capabilities, and which authentication method
they should use for the client to get connected. By default, this authentication is a challenge-response
scheme that relies on &lt;a href="https://en.wikipedia.org/wiki/SHA-1"&gt;SHA-1&lt;/a&gt;. But starting MariaDB 10.1.22, a new cryptographic-based authentication
mechanism called &lt;a href="https://mariadb.com/kb/en/authentication-plugin-ed25519/"&gt;&lt;code&gt;auth_ed25519&lt;/code&gt;&lt;/a&gt; can be used for improved security at connection time,
and PyMySQL recently added support for it.&lt;/p&gt;
&lt;h2&gt;MySQL server authentication&lt;/h2&gt;
&lt;p&gt;MySQL and MariaDB allow a variety of authentication methods: PAM-based, SHA-1 hashed challenges, SHA-256
challenges over RSA encryption... The default authentication since MySQL 4.1 and probably still the most used
nowadays is called &lt;a href="https://mariadb.com/kb/en/authentication-plugin-mysql_native_password/"&gt;&lt;code&gt;mysql_native_password&lt;/code&gt;&lt;/a&gt;. It's a simple yet clever authentication scheme,
because the server never stores the user's password directly in the database, nor does it exchange it over the
wire. Instead, the server only stores an indirect hash of the original password:&lt;/p&gt;
&lt;div class="math"&gt;$$ \text{SHA-1}(\text{SHA-1}(\text{password}))) $$&lt;/div&gt;
&lt;p&gt;To authenticate a client, the server concatenate a random scramble to that information, hashes the result with
SHA-1, and sends it as a challenge to the client. As a response, the client must XOR this challenge with a
SHA-1 hash of its password:&lt;/p&gt;
&lt;div class="math"&gt;$$ \text{SHA-1}(\text{scramble} \parallel \text{SHA-1}(\text{SHA-1}(\text{password}))) \oplus \text{SHA-1}(\text{password}) $$&lt;/div&gt;
&lt;p&gt;The XOR function being its own inverse, the server can now XOR the client's response with the original
challenge to retrieve &lt;span class="math"&gt;\(\text{SHA-1}(\text{password})\)&lt;/span&gt;. It then hashes that result with SHA-1 a last time and
compares it with the digest stored in the DB to validate the authentication.&lt;/p&gt;
&lt;p&gt;The fact that the server only stores a double-SHA-1 digest helps mitigate the risk of recovering a password
from the DB if it is compromised, but this is not perfect either. SHA-1 itself is &lt;a href="https://shattered.io/static/shattered.pdf"&gt;considered insecure
nowadays&lt;/a&gt;, so new authentication plugins have been developed.&lt;/p&gt;
&lt;h2&gt;More secure authentication&lt;/h2&gt;
&lt;p&gt;MySQL has developed an improved authentication plugin called &lt;a href="https://mariadb.com/kb/en/authentication-plugin-sha-256/"&gt;&lt;code&gt;sha256_password&lt;/code&gt;&lt;/a&gt; (and its
variant &lt;code&gt;caching_sha2_password&lt;/code&gt;).  That plugin stores a &lt;span class="math"&gt;\(\text{SHA-256}(\text{password})\)&lt;/span&gt; digest in the DB,
and relies on an RSA key pair to encrypt data exchanged during the authentication. When a client wants to
authenticate, it receives a random scramble from the server, XORs the password with it, and encrypts the
result with the server's public key. When the server receives the response, it uses its private key to decrypt
it, XORs the decrypted response, hashes the result with SHA-256, and compares it with the hashed credentials
in the DB to validate the authentication.&lt;/p&gt;
&lt;p&gt;The new &lt;code&gt;sha256_password&lt;/code&gt; improves over &lt;code&gt;mysql_native_password&lt;/code&gt; since it no longer uses SHA-1, but it comes
with the major inconvenience that one must manage the public key's life cycle (deployment, renewal...), so
this authentication can sometimes become tedious or impractical to use.&lt;/p&gt;
&lt;p&gt;MariaDB took a different approach with &lt;code&gt;auth_ed25519&lt;/code&gt;. its challenge-response consists in signing a random
scramble with a cryptographic function. It is based on Ed25519, a type of Edwards-curve Digital Signature
Algorithm (EdDSA) that uses SHA-512 and the &lt;a href="https://en.wikipedia.org/wiki/Curve25519"&gt;Curve25519&lt;/a&gt; twisted Edwards curve. This is a fast and
secure cryptographic signature. But most importantly, &lt;code&gt;auth_ed25519&lt;/code&gt; doesn't need to distribute keys to
clients, so it's much more convenient and practical than &lt;code&gt;sha256_password&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Ed25519 and Elliptic Curve Cryptography&lt;/h2&gt;
&lt;p&gt;Elliptic curve cryptography (ECC) is a type of public-key cryptography that relies on the algebraic structure
of elliptic curves over finite fields.&lt;/p&gt;
&lt;p&gt;Specifically, &lt;a href="https://en.wikipedia.org/wiki/EdDSA#Ed25519"&gt;Ed25519&lt;/a&gt; operates on the points of a twisted Edwards curve, a 2D curve whose point
coordinates belong the ring of integers modulo &lt;span class="math"&gt;\(2^{255-19}\)&lt;/span&gt;. There is an special addition law for points:
adding two points on the curve is a computation that always yields a new point on the curve. There exists a
cyclic subgroup of &lt;span class="math"&gt;\(l\)&lt;/span&gt; points, &lt;span class="math"&gt;\(l\)&lt;/span&gt; being a large prime number (&lt;span class="math"&gt;\(2^{252}\)&lt;/span&gt; + something). In this subgroup,
Ed25519 defines a base point &lt;span class="math"&gt;\(B\)&lt;/span&gt;, of order &lt;span class="math"&gt;\(l\)&lt;/span&gt;; that means, adding &lt;span class="math"&gt;\(B\)&lt;/span&gt; to itself &lt;span class="math"&gt;\(l\)&lt;/span&gt; times will give back
&lt;span class="math"&gt;\(B\)&lt;/span&gt;. Lastly, adding a curve point to itself numerous times is called a scalar multiplication:&lt;/p&gt;
&lt;div class="math"&gt;$$ s.B = \underbrace{B + B + B + \ldots + B}_{s~\text{times}} = C $$&lt;/div&gt;
&lt;p&gt;Now that the maths are laid out, here is what the Ed25519 signature scheme looks like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A private key &lt;span class="math"&gt;\(s\)&lt;/span&gt; is a 32 bytes buffer of uniformly random data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A public key &lt;span class="math"&gt;\(A\)&lt;/span&gt; is a point on the Edwards curve.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A point on the Edwards curve is encoded as a 32 bytes buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Signing a message &lt;span class="math"&gt;\(M\)&lt;/span&gt; with a public key &lt;span class="math"&gt;\(A\)&lt;/span&gt;, returns a curve point &lt;span class="math"&gt;\(R\)&lt;/span&gt; and a 32 bytes number &lt;span class="math"&gt;\(S\)&lt;/span&gt;. A signature is
legitimate if it verifies the following equality:&lt;/p&gt;
&lt;div class="math"&gt;$$ S.B = R + \text{SHA-512}( R \parallel A \parallel M).A $$&lt;/div&gt;
&lt;p&gt;where the dot is the scalar multiplication, the plus is the point addition, and the double pipe is the buffer
concatenation.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(A\)&lt;/span&gt;, &lt;span class="math"&gt;\(R\)&lt;/span&gt; and &lt;span class="math"&gt;\(S\)&lt;/span&gt; are the public information derived from the corresponding private key &lt;span class="math"&gt;\(k\)&lt;/span&gt;. Given
&lt;span class="math"&gt;\(\text{SHA-512}(k)\)&lt;/span&gt;, the first half &lt;span class="math"&gt;\(s\)&lt;/span&gt; is clamped and produces &lt;span class="math"&gt;\(A = s.B\)&lt;/span&gt;. The last half &lt;span class="math"&gt;\(t\)&lt;/span&gt; is hashed with
the message, and the resulting value &lt;span class="math"&gt;\(r = \text{SHA-512}( t \parallel M )\)&lt;/span&gt; produces &lt;span class="math"&gt;\(R = r.B\)&lt;/span&gt;. Number &lt;span class="math"&gt;\(S\)&lt;/span&gt; is
computed using modular arithmetic and equals &lt;span class="math"&gt;\(r + (\text{SHA-512}( R \parallel A \parallel M) \times s)\)&lt;/span&gt;
modulo &lt;span class="math"&gt;\(l\)&lt;/span&gt;. With a bit of math reshuffling, you can see that the neat thing about these definitions is that
they satisfy the equality from above, and yet all that is needed to verify a signature comes from public
information only:&lt;/p&gt;
&lt;div class="math"&gt;\begin{alignat}{1} S.B &amp;amp;= (r &amp;amp;+~ (&amp;amp;\text{SHA-512}( R \parallel A \parallel M) \times s)).B \\
 &amp;amp;= r.B &amp;amp;+~ (&amp;amp;\text{SHA-512}( R \parallel A \parallel M) \times s).B \\
 &amp;amp;= r.B &amp;amp;+~ &amp;amp;\text{SHA-512}( R \parallel A \parallel M).s.B \\
 &amp;amp;= R &amp;amp;+~ &amp;amp;\text{SHA-512}( R \parallel A \parallel M).A
\end{alignat}&lt;/div&gt;
&lt;p&gt;There are two public &lt;a href="https://ed25519.cr.yp.to/software.html"&gt;reference implementations&lt;/a&gt; of Ed25519. One is a simple and excruciatingly slow
Python version, to get familiar with the mathematics. The production-ready implementations use C and
assembler. They are very fast and designed to be secure (e.g. immune to timing attacks).&lt;/p&gt;
&lt;p&gt;All the Ed25519 libraries currently available are based on the reference implementation, and they more or less
provide the same API: creating a signing key pair, signing a message with a public key, and verifying that a
message signature is legitimate. One well known C library that supports Ed25519 is &lt;a href="https://github.com/jedisct1/libsodium"&gt;libsodium&lt;/a&gt;. In
our case, the Python-equivalent is &lt;a href="https://github.com/pyca/pynacl"&gt;PyNaCl&lt;/a&gt;, a Python-binding of libsodium.&lt;/p&gt;
&lt;h2&gt;How MariaDB takes advantage of Ed25519&lt;/h2&gt;
&lt;p&gt;Ed25519 ticks all the previous boxes for a secure authentication plugin: it only stores a digest in the DB,
and it replaces SHA-1 with modern cryptographic functions. It's based on the reference ed25519 implementation,
and it uses the signature scheme like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The user's password is the private key &lt;span class="math"&gt;\(k\)&lt;/span&gt;, and it's only known by the client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The MariaDB server only stores the public key &lt;span class="math"&gt;\(A\)&lt;/span&gt;, which as we saw earlier is a curve point derived from the
    first half of &lt;span class="math"&gt;\(\text{SHA-512}(k)\)&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a client wants to authenticate, it gets a random message &lt;span class="math"&gt;\(M\)&lt;/span&gt; as a challenge, signs it with its
    private key &lt;span class="math"&gt;\(k\)&lt;/span&gt;, and returns the signature pair &lt;span class="math"&gt;\(R\)&lt;/span&gt; and &lt;span class="math"&gt;\(S\)&lt;/span&gt; to the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The server then computes &lt;span class="math"&gt;\(R + \text{SHA-512}( R \parallel A \parallel M ).A\)&lt;/span&gt; and authenticates the user if
    the result matches the digest stored in the DB.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is clever, and also simple from a client's perspective! Well, it would be if it wasn't for a small but
important detail... Can you see how it differs from the Ed25519 specification previously described? That's
right, the private key is no longer &lt;q&gt;a 32 bytes buffer of uniformly random data&lt;/q&gt;, it's now an arbitrary
size, non-random password. At the very least, this makes all existing Ed25519 python implementations useless,
because their API forbids any private key which is not 32 bytes long... Likewise, we can't rely on MariaDB
itself, because the authentication API is not exported in a standalone library that could be reused by a MySQL
client such as PyMySQL.&lt;/p&gt;
&lt;h2&gt;Implementing auth_ed25519 in PyMySQL&lt;/h2&gt;
&lt;p&gt;So how to add support for &lt;code&gt;auth_ed25519&lt;/code&gt; in PyMySQL? Since it has a peculiar definition of private keys, we
can't reuse existing Ed25519 API. But we could re-implement the Ed25519 signature scheme with different private
keys if we could do big integer modulo arithmetic and Edwards-curve arithmetic... Luckily for python clients,
libsodium 1.0.18 started to expose a new low-level API for finite field arithmetic and point-scalar
multiplication, which is exactly what it uses internally to implement the Ed25519 signature scheme. PyNaCl
1.4.0 provides the necessary bindings to these new API.&lt;/p&gt;
&lt;p&gt;Now let's say you configured a DB user to require &lt;code&gt;auth_ed25519&lt;/code&gt; authentication, and you run a PyMySQL client
to connect to MariaDB. When PyMySQL initiates the connection, it will receive a challenge from the server as
well as an indication that it must be processed with the &lt;code&gt;auth_ed25519&lt;/code&gt; plugin. And since we have the
low-level arithmetic API at our disposal, we can just implement the expected signature scheme with a couple of
calls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ed25519_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scramble&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha512&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# R = r.B&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha512&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;scramble&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nacl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_core_ed25519_scalar_reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nacl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_scalarmult_ed25519_base_noclamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# A = s.B&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scalar_clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nacl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_scalarmult_ed25519_base_noclamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# S = r + (SHA-512( R | A | M) * s)&lt;/span&gt;
    &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha512&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;scramble&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nacl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_core_ed25519_scalar_reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nacl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_core_ed25519_scalar_mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nacl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crypto_core_ed25519_scalar_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How to use auth_ed25519 in PyMySQL clients&lt;/h2&gt;
&lt;p&gt;Before using &lt;code&gt;auth_ed25519&lt;/code&gt; in PyMySQL, a user in the DB must be configured to require authentication via the
&lt;code&gt;auth_ed25519&lt;/code&gt; plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt; mysql -u root -h &lt;span class="k"&gt;$(&lt;/span&gt;hostname&lt;span class="k"&gt;)&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;CREATE USER foo IDENTIFIED VIA ed25519 USING PASSWORD(&amp;quot;bar&amp;quot;);&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;#&lt;/span&gt; mysql -u root -h &lt;span class="k"&gt;$(&lt;/span&gt;hostname&lt;span class="k"&gt;)&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;select user,host,password,authentication_string,plugin from mysql.user where user = &amp;quot;foo&amp;quot;;&amp;#39;&lt;/span&gt; 
&lt;span class="go"&gt;+------+------+----------+-----------------------+---------+&lt;/span&gt;
&lt;span class="go"&gt;| User | Host | Password | authentication_string | plugin  |&lt;/span&gt;
&lt;span class="go"&gt;+------+------+----------+-----------------------+---------+&lt;/span&gt;
&lt;span class="go"&gt;| foo  | %    |          | &amp;lt;HASH_REDACTED&amp;gt;       | ed25519 |&lt;/span&gt;
&lt;span class="go"&gt;+------+------+----------+-----------------------+---------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The best part of using &lt;code&gt;auth_ed25519&lt;/code&gt; is that it is totally transparent for PyMySQL,
or any higher-level module that depends on it (for example the well known ORM &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;).
The connection arguments are the same whether the user is configured to use &lt;code&gt;auth_ed25519&lt;/code&gt;, the
default &lt;code&gt;mysql_native_password&lt;/code&gt;, or anything else. As long as it is supported by PyMySQL, the
right handler will be used by PyMySQL at runtime to authenticate with the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymysql&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As seen in this example, only the PyMySQL client knows the real password. MariaDB never store it in the
database, it only stores a base64 representation of the public key derived from the password.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Starting PyMySQL 0.10.0, you can connect to MariaDB with users that have been configured to authenticate
via &lt;code&gt;auth_ed25519&lt;/code&gt;. This new authentication plugin drops the use of SHA-1 for a more secure and more
future-proof server authentication.&lt;/p&gt;
&lt;p&gt;Connecting to the database with &lt;code&gt;auth_ed25519&lt;/code&gt; is transparent for clients: you don't need any code change in
the client, and you don't need to distribute any cryptographic keys to the client. As such, it's a nice
improvement over the other secure alternative &lt;code&gt;sha256_password&lt;/code&gt;. The only impact of using &lt;code&gt;auth_ed25519&lt;/code&gt; is
that Specific SQL commands must be used to enable &lt;code&gt;auth_ed25519&lt;/code&gt; on a per-user basis. This can in general be
delegated to a generic component such as &lt;code&gt;puppet-mysql&lt;/code&gt;, as it is currently done in OpenStack. But that is a
story for another day.&lt;/p&gt;
&lt;p&gt;PyMySQL 0.10.0 is now available in PyPI and at least in Fedora Rawhide and Arch Linux, so it's the right time
to try it out.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "true";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS_CHTML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/CommonHTML']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'CommonHTML': { " +
        "        scale: 93, " +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        scale: 93, " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Code"></category><category term="mariadb"></category><category term="crypto"></category><category term="python"></category></entry><entry><title>Troubleshooting open_files_limit in MariaDB</title><link href="https://dciabrin.net/posts/2016/03/troubleshooting-open_files_limit-in-mariadb.html" rel="alternate"></link><published>2016-03-22T15:01:05+01:00</published><updated>2016-03-22T15:01:05+01:00</updated><author><name>Damien Ciabrini</name></author><id>tag:dciabrin.net,2016-03-22:/posts/2016/03/troubleshooting-open_files_limit-in-mariadb.html</id><summary type="html">&lt;p&gt;It may happen in the MariaDB logs that you see failures to set &lt;code&gt;open_files_limit&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;160318 21:48:04 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160318 21:48:04 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160318 21:48:04 [Warning] Could not increase number of …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;It may happen in the MariaDB logs that you see failures to set &lt;code&gt;open_files_limit&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;160318 21:48:04 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160318 21:48:04 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160318 21:48:04 [Warning] Could not increase number of max_open_files to more than 1024 (request: 4907)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Meaning MariaDB was unable to raise the limit of maximum file descriptors at startup, with all the subsequent problems it can cause. Sometimes it is simply due to a bad setting in configuration files, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;open_files_limit=-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;How MariaDB processes option open_files_limit&lt;/h2&gt;
&lt;p&gt;When started, MariaDB follows an internal logics to set the limit of file descriptor to use at run-time: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It computes the minimum number of &lt;em&gt;wanted_files&lt;/em&gt;, whichever is the biggest from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fd needed by MariaDB and innodb (based on some heuristics)&lt;/li&gt;
&lt;li&gt;5 * max_connections as set in config file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It sets the new process limit (&lt;code&gt;setrlimit&lt;/code&gt;) to whichever is the biggest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;wanted_files&lt;/em&gt; as computed above&lt;/li&gt;
&lt;li&gt;or value of option &lt;code&gt;open_files_limit&lt;/code&gt; (e.g. set in server.cnf)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, if the MariaDB configuration files contain a line like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;open_files_limit=-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The signed value will be adjusted automatically by MariaDB to match the expected uint range:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;160105  9:10:50 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160105  9:10:50 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The side effect is that &lt;code&gt;setrlimit&lt;/code&gt; will now be called with 4294967295, which fails with &lt;code&gt;EPERM&lt;/code&gt;&lt;sup id="fnref:eperm"&gt;&lt;a class="footnote-ref" href="#fn:eperm"&gt;1&lt;/a&gt;&lt;/sup&gt; even when run as root because the requested value which is above system limits. The per-process limit will thus stick to the default, which is usually 1024 fd. MariaDB will signal the failure by logging the value originally computed for &lt;em&gt;wanted_files&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;160105  9:10:50 [Warning] Could not increase number of max_open_files to more than 1024 (request: 9003)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Config file or command line&lt;/h2&gt;
&lt;p&gt;One noteworthy detail is that one can ask MariaDB to raise the file descriptors limit at the command line as well, with argument &lt;code&gt;--open-files-limit=XXX&lt;/code&gt;. In fact, at MariaDB startup, &lt;code&gt;mysqld_safe&lt;/code&gt; scans both configuration file and command line for option &lt;code&gt;open_files_limit&lt;/code&gt; and if found, it will pass that value&lt;sup id="fnref:config"&gt;&lt;a class="footnote-ref" href="#fn:config"&gt;2&lt;/a&gt;&lt;/sup&gt; explicitly at command line when it spawns the &lt;code&gt;mysqld&lt;/code&gt; server.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;mysqld&lt;/code&gt; server itself first parses options specified in the configuration files, and after that those coming from the command line. Given the way &lt;code&gt;mysqld_safe&lt;/code&gt; parses option &lt;code&gt;open_files_limit&lt;/code&gt;, you can see that the &lt;code&gt;mysqld&lt;/code&gt; server will parse the option twice if it comes from the configuration file.&lt;/p&gt;
&lt;h2&gt;Concrete examples from the logs&lt;/h2&gt;
&lt;p&gt;Back to the original example from this article:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;160318 21:48:04 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160318 21:48:04 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160318 21:48:04 [Warning] Could not increase number of max_open_files to more than 1024 (request: 4907)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can extract from those logs that option &lt;code&gt;open_files_limit&lt;/code&gt; was set to -1 somewhere in the config files, and that no command line option &lt;code&gt;--open-files-limit&lt;/code&gt; was passed to &lt;code&gt;mysqld_safe&lt;/code&gt; to override it. When parsing the options, &lt;code&gt;mysqld&lt;/code&gt; logged a bound check warning for the value coming from the configuration file, and another one for the value forwarded by &lt;code&gt;mysqld_safe&lt;/code&gt; via the command line. Corrected value was too high for &lt;code&gt;setrlimit&lt;/code&gt;, which consequently failed.&lt;/p&gt;
&lt;p&gt;Another pattern that can arise is when MariaDB is used with Galera replication. At startup, &lt;code&gt;mysqld_safe&lt;/code&gt; needs to run &lt;code&gt;mysqld&lt;/code&gt; once with special flags to recover the replication position of the galera node. It then start &lt;code&gt;mysqld&lt;/code&gt; a second time with the proper replication start position. This has the effect of having twice as many warning messages in the logs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;160322 13:07:14 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql
160322 13:07:14 mysqld_safe WSREP: Running position recovery with --log_error=&amp;#39;/var/lib/mysql/wsrep_recovery.uuL8VZ&amp;#39; --pid-file=&amp;#39;/var/lib/mysql/db2-recover.pid&amp;#39;
160322 13:07:14 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160322 13:07:14 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160322 13:07:14 [Warning] Could not increase number of max_open_files to more than 1024 (request: 2859)
160322 13:07:16 mysqld_safe WSREP: Recovered position c87b7e3e-ec54-11e5-92b3-16a45d02f190:5
160322 13:07:16 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160322 13:07:16 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160322 13:07:16 [Note] WSREP: wsrep_start_position var submitted: &amp;#39;c87b7e3e-ec54-11e5-92b3-16a45d02f190:5&amp;#39;
160322 13:07:16 [Warning] Could not increase number of max_open_files to more than 1024 (request: 2859)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If MariaDB/Galera is started with a valid &lt;code&gt;--open-files-limit&lt;/code&gt; argument at the command line, you will only see one bound check warning in the logs per mysqld run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;160322 13:23:22 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql
160322 13:23:22 mysqld_safe WSREP: Running position recovery with --log_error=&amp;#39;/var/lib/mysql/wsrep_recovery.WAKIoR&amp;#39; --pid-file=&amp;#39;/var/lib/mysql/db2-recover.pid&amp;#39;
160322 13:23:22 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
160322 13:23:24 mysqld_safe WSREP: Recovered position c87b7e3e-ec54-11e5-92b3-16a45d02f190:5
160322 13:23:24 [Warning] option &amp;#39;open_files_limit&amp;#39;: unsigned value 18446744073709551615 adjusted to 4294967295
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Checking whether open_files_limit setting is active&lt;/h2&gt;
&lt;p&gt;In order to change &lt;code&gt;open_files_limit&lt;/code&gt;, you should start MariaDB as root and use option &lt;code&gt;--user&lt;/code&gt; to let &lt;code&gt;mysqld&lt;/code&gt; switch to the requested user after setting limits. If you don't see complaints in the logs, &lt;code&gt;open_files_limit&lt;/code&gt; setting should be applied. Under Linux, a quick means of verifying that is to probe the running &lt;code&gt;mysqld&lt;/code&gt; process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt; cat /proc/&lt;span class="k"&gt;$(&lt;/span&gt;pidof /usr/libexec/mysqld&lt;span class="k"&gt;)&lt;/span&gt;/limits &lt;span class="p"&gt;|&lt;/span&gt; grep -e Limit -e &lt;span class="s1"&gt;&amp;#39;open files&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;Limit                     Soft Limit           Hard Limit           Units&lt;/span&gt;
&lt;span class="go"&gt;Max open files            10245                10245                files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Likewise, the &lt;code&gt;mysql&lt;/code&gt; client will return the limit that has been successfully set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;#&lt;/span&gt; mysql -e &lt;span class="s2"&gt;&amp;quot;SHOW VARIABLES LIKE &amp;#39;open_files_limit&amp;#39;;&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;+------------------+-------+&lt;/span&gt;
&lt;span class="go"&gt;| Variable_name    | Value |&lt;/span&gt;
&lt;span class="go"&gt;+------------------+-------+&lt;/span&gt;
&lt;span class="go"&gt;| open_files_limit | 10245 |&lt;/span&gt;
&lt;span class="go"&gt;+------------------+-------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don't be surprised if you don't see the exact value you specified for &lt;code&gt;open_files_limit&lt;/code&gt;. Remember that MariaDB will call &lt;code&gt;setrlimit&lt;/code&gt; with the highest value between &lt;em&gt;wanted_files&lt;/em&gt; and &lt;code&gt;open_files_limit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;Soft Limit&lt;/code&gt; or the &lt;code&gt;mysql&lt;/code&gt; client reports something like 1024, that means &lt;code&gt;mysqld&lt;/code&gt; did not raise the maximum file descriptor limit appropriately, and the logs should contain enough information to find out why.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:eperm"&gt;
&lt;p&gt;From setrlimit man: EPERM  The caller tried to increase the hard RLIMIT_NOFILE limit above the maximum defined by /proc/sys/fs/nr_open (see proc(5))&amp;#160;&lt;a class="footnote-backref" href="#fnref:eperm" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:config"&gt;
&lt;p&gt;If set in configuration file and at the command line, the latter takes precedence over the former&amp;#160;&lt;a class="footnote-backref" href="#fnref:config" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Code"></category><category term="mariadb"></category><category term="galera"></category></entry><entry><title>Galera boot process in Open Stack HA and manual override</title><link href="https://dciabrin.net/posts/2015/10/galera-boot-process-in-open-stack-ha-and-manual-override.html" rel="alternate"></link><published>2015-10-02T18:45:05+02:00</published><updated>2015-10-02T18:45:05+02:00</updated><author><name>Damien Ciabrini</name></author><id>tag:dciabrin.net,2015-10-02:/posts/2015/10/galera-boot-process-in-open-stack-ha-and-manual-override.html</id><summary type="html">&lt;p&gt;Deployments of OpenStack that rely on MariaDB+Galera benefit from a HA database thanks to Galera's synchronous replication. In such deployments, the Galera cluster is typically managed via Pacemaker, by means of a galera resource agent.&lt;/p&gt;
&lt;p&gt;While Galera itself has its own notion of cluster management (membership, health check, write-set …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Deployments of OpenStack that rely on MariaDB+Galera benefit from a HA database thanks to Galera's synchronous replication. In such deployments, the Galera cluster is typically managed via Pacemaker, by means of a galera resource agent.&lt;/p&gt;
&lt;p&gt;While Galera itself has its own notion of cluster management (membership, health check, write-set replication...), a resource agent is still necessary for Pacemaker to perform the basic cluster management duties, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Starting up the Galera servers on the available nodes in the cluster&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Health monitoring and recovery actions on failure (e.g. fencing)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This document describes the concepts involved in booting a Galera cluster, how the galera resource agent implements the boot process of a galera cluster, and how it can be overriden for recovery scenarios.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Galera cluster overview&lt;/h2&gt;
&lt;p&gt;A Galera cluster is identified by a cluster address, stored in the configuration variable &lt;code&gt;wsrep_cluster_address&lt;/code&gt;. The value of this variable is a URI identifying all the nodes that can potentially be member of the cluster. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wsrep_cluster_address=gcomm://node1,node2,node3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is used by MariaDB at boot time to register to the cluster and to synchronize its local database with the cluster. The value of &lt;code&gt;wsrep_cluster_address&lt;/code&gt; conveys a special meaning which can be used to either start a cluster or rejoin it.&lt;/p&gt;
&lt;h2&gt;Galera boot process explained&lt;/h2&gt;
&lt;p&gt;Galera replicates database writes across all nodes of the cluster. A write succeeds if more than half of the nodes in the cluster acknowledge it (quorum). On success, a global counter representing the most recent transaction is incremented: this is called the last sequence number, or seqno. Desynchronized nodes or newly joining nodes will automatically sync their local database to this last sequence number.&lt;/p&gt;
&lt;p&gt;In order to restart an existing Galera cluster, one needs first to identify a node whose local database contains the latest transaction acknowleged by the cluster, i.e. the one with the biggest seqno. Once identified, MariaDB can be started on the node with option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wsrep_cluster_address=gcomm://
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This bootstraps a new cluster&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; from this node's local state: the node becomes the new Primary partition, which means the remaining nodes will sync against this new cluster when started with &lt;code&gt;wsrep_cluster_address=gcomm://node1,node2,node3&lt;/code&gt;.  &lt;/p&gt;
&lt;h2&gt;How the resource agent boots the cluster&lt;/h2&gt;
&lt;p&gt;The resource agent encodes the process of booting a Galera cluster as a series of unitary steps; electing a bootstrap node, booting Galera servers in sequence, and marking nodes as available in the clusters. It tracks those steps via Pacemaker's multi-state resource plus various attributes stored in Pacemaker's Cluster Information Base (CIB).&lt;/p&gt;
&lt;p&gt;In order to boot or restart a Galera cluster, the resource agent needs to retrieve the last seqno of all the nodes in the clusters. Without that information, the resource agent cannot safely identify a bootstrap node and it won't tell Pacemaker to start the Galera cluster.&lt;/p&gt;
&lt;p&gt;The boot process works as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When a galera resource is in state &lt;em&gt;Started&lt;/em&gt;, the resource agent retrieves the last seqno from the local MariaDB, stores it in the CIB and goes to &lt;em&gt;Slave&lt;/em&gt; state. At this stage, no Galera server is running.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once all the nodes are in &lt;em&gt;Slave&lt;/em&gt; state, the resource agent elects the bootstrap node, tags it in the CIB, and tells Pacemaker that it can promote the galera resource on this node to the &lt;em&gt;Master&lt;/em&gt; state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When Pacemaker promotes the bootstrap node, the resource agent starts the Galera server, which bootstraps a new cluster. It then marks the remaining nodes as being ready for promotion. The resource on the bootstrap node is switched to &lt;em&gt;Master&lt;/em&gt;, and the Galera cluster is ready to accept SQL queries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pacemaker promotes the remaining nodes. For each node, the resource agent start a Galera server, which synchronizes its local state with the cluster via a State Snapshot Transfer (SST). This operation can take some time. The promotion to &lt;em&gt;Master&lt;/em&gt; finishes when the synchronization is over and the Galera server is ready to accept SQL queries.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this stage, the entire cluster is up and running, and the galera resource is set &lt;em&gt;Master&lt;/em&gt; on all nodes.&lt;/p&gt;
&lt;p&gt;Note: the notion of Master/Slave state is completely different from Galera's notion of Primary / Non-primary state&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Galera node is in primary state if it belongs to a partition of the cluster which has quorum (and is thus active)&lt;/li&gt;
&lt;li&gt;If a Galera node detects the partition it belongs to is inquorate, it will switch to Non-primary state, and SQL queries will fail&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Overriding the boot process&lt;/h2&gt;
&lt;p&gt;The resource agent expects all the nodes to be available for performing a boot. However, there are times where this is not the case and for practical reasons it is necessary to force the boot process.&lt;/p&gt;
&lt;p&gt;Here are examples of manual override scenarios, with steps to perform to bring the Galera cluster up. They apply on a  three-node Pacemaker cluster, composed of nodes &lt;code&gt;node1&lt;/code&gt;, &lt;code&gt;node2&lt;/code&gt;, &lt;code&gt;node3&lt;/code&gt;. In this Pacemaker cluster, the Galera resource is called &lt;code&gt;galeracluster&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Scenario 1: Galera cluster to be restarted, but one node won't come up&lt;/h3&gt;
&lt;p&gt;Suppose that &lt;code&gt;node3&lt;/code&gt; in the cluster is unavailable following an unexpected event (e.g. Galera crashed and left in a inconsistent state, hardware failure on &lt;code&gt;node3&lt;/code&gt;). In such case, the resource agent is not able to retrieve all &lt;code&gt;seqno&lt;/code&gt; in the cluster, so no bootstrap node can be elected, and cluster won't restart. One can force the election of a bootstrap node and start it, in order to unblock the resource agent and let Pacemaker boot the rest of the Galera cluster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do the following steps only if you're sure that the forced bootstrap node is up-to-date, otherwise you will permanently desynchronise your cluster and will lose data!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That being said, to unblock the boot process, you will need to elect and promote a bootstrap node manually. So first, take control of Galera away from Pacemaker:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; pcs resource unmanage galeracluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, identify the node with the most recent seqno. If Pacemaker previously tried to restart the cluster, you can retrieve this information in the CIB, e.g. for &lt;code&gt;node1&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; crm_attribute -N node1 -l reboot --name galeracluster-last-committed -Q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the last &lt;code&gt;seqno&lt;/code&gt; is not present in the CIB&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;, you can retrieve it with MariaDB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; mysqld_safe --wsrep-recover
&lt;span class="go"&gt;151002 13:59:35 mysqld_safe Logging to &amp;#39;/var/log/mariadb/mariadb.log&amp;#39;.&lt;/span&gt;
&lt;span class="go"&gt;151002 13:59:35 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql&lt;/span&gt;
&lt;span class="go"&gt;151002 13:59:35 mysqld_safe WSREP: Running position recovery with --log_error=&amp;#39;/var/lib/mysql/wsrep_recovery.2FkYLQ&amp;#39; --pid-file=&amp;#39;/var/lib/mysql/db1-recover.pid&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;151002 13:59:50 mysqld_safe WSREP: Recovered position 4c7ba2a8-566a-11e5-8250-1e939ac17c77:9&lt;/span&gt;
&lt;span class="go"&gt;151002 13:59:52 mysqld_safe mysqld from pid file /var/run/mariadb/mariadb.pid ended&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MariaDB will recover its last known cluster position as &lt;code&gt;UUID:seqno&lt;/code&gt;. In our case, on &lt;code&gt;node1&lt;/code&gt; the last &lt;code&gt;seqno&lt;/code&gt; is thus &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you determine which node has the bigger &lt;code&gt;seqno&lt;/code&gt;, make it the bootstrap node and force Pacemaker to start Galera by switching the resource's state to &lt;em&gt;Master&lt;/em&gt;. In our case, assuming &lt;code&gt;node1&lt;/code&gt; is the bootstrap node, connect to &lt;code&gt;node1&lt;/code&gt; and run the following commands locally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; crm_attribute -N node1 -l reboot --name galeracluster-bootstrap -v &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; crm_attribute -N node1 -l reboot --name master-galeracluster -v &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; crm_resource --force-promote -r galeracluster -V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, instruct Pacemaker to re-detect the current state of the galera resource. This will clean up failcount and purge knowledge of past failures:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; pcs resource cleanup galeracluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point Galera is up and Pacemaker knows that it is up. Give back control of Galera to Pacemaker and the remaining node will join automatically&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4"&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; pcs resource &lt;span class="nb"&gt;enable&lt;/span&gt; galeracluster
&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; pcs resource manage galeracluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Scenario 2: Multiple hardware failures, keep service on the remaining node&lt;/h3&gt;
&lt;p&gt;If &lt;code&gt;node2&lt;/code&gt; and &lt;code&gt;node3&lt;/code&gt; fail successively in the three-node cluster, you may end up with only &lt;code&gt;node1&lt;/code&gt; up and running. Pacemaker will react differently to this condition depending on how quorum is configured in the cluster&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;For Galera, things are less flexible: if two nodes out of three quit the cluster unexpectedly, the remaining node is considered inquorate and the Galera server will switch to Non-primary state. This is an error condition for the resource agent, and that causes Pacemaker to stop the Galera on the remaining node.&lt;/p&gt;
&lt;p&gt;You can force the restart of Galera on &lt;code&gt;node1&lt;/code&gt; if this node is still up and running in Pacemaker&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6"&gt;6&lt;/a&gt;&lt;/sup&gt;. You just need to bootstrap the Galera cluster by applying similar steps as those described in Scenario 1. &lt;strong&gt;Please only do so if you are sure that the node is in sync with the latest revision of the cluster, otherwise you will lose data&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Apply the step from Scenario 1 &lt;strong&gt;and stop before giving back control to Pacemaker&lt;/strong&gt;&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7"&gt;7&lt;/a&gt;&lt;/sup&gt;. At this point, check whether the Pacemaker cluster has quorum:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; corosync-quorumtool -s
&lt;span class="go"&gt;Quorum information&lt;/span&gt;
&lt;span class="go"&gt;------------------&lt;/span&gt;
&lt;span class="go"&gt;Date:             Fri Oct  2 18:20:37 2015&lt;/span&gt;
&lt;span class="go"&gt;Quorum provider:  corosync_votequorum&lt;/span&gt;
&lt;span class="go"&gt;Nodes:            1&lt;/span&gt;
&lt;span class="go"&gt;Node ID:          1&lt;/span&gt;
&lt;span class="go"&gt;Ring ID:          1376&lt;/span&gt;
&lt;span class="go"&gt;Quorate:          No&lt;/span&gt;

&lt;span class="go"&gt;Votequorum information&lt;/span&gt;
&lt;span class="go"&gt;----------------------&lt;/span&gt;
&lt;span class="go"&gt;Expected votes:   3&lt;/span&gt;
&lt;span class="go"&gt;Highest expected: 3&lt;/span&gt;
&lt;span class="go"&gt;Total votes:      1&lt;/span&gt;
&lt;span class="go"&gt;Quorum:           2 Activity blocked&lt;/span&gt;
&lt;span class="go"&gt;Flags:&lt;/span&gt;

&lt;span class="go"&gt;Membership information&lt;/span&gt;
&lt;span class="go"&gt;----------------------&lt;/span&gt;
&lt;span class="go"&gt;Nodeid      Votes Name&lt;/span&gt;
&lt;span class="go"&gt;     1          1 node1 (local)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If it doesn't, you have to unblock quorum temporarily for Pacemaker to manage resources, i.e. set the number of expected votes the the number of nodes which are still on-line. In our example, only &lt;code&gt;node1&lt;/code&gt; is on-line, so quorum can be temporarily unblocked with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; corosync-quorumtool -e1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this setting is not definitive. As soon as other nodes rejoin, the number of expected votes will get back to the original value (3 in the example).&lt;/p&gt;
&lt;p&gt;Once the cluster is quorate again, you can give back control of Galera to Pacemaker:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;[root@node1 ~]#&lt;/span&gt; pcs resource manage galeracluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Starting a new cluster can also be achieved with &lt;code&gt;--wsrep_new_cluster&lt;/code&gt;. The two options are equivalent.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Data-related SQL queries will fail with &lt;code&gt;ERROR 1047 (08S01): WSREP has not yet prepared node for application use&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;If the information is not in the CIB, &lt;code&gt;crm_attribute&lt;/code&gt; will report an error like &lt;code&gt;Error performing operation: No such device or address&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;code&gt;pcs resource enable galeracluster&lt;/code&gt; will ensure that Pacemaker always try to promote this resource's state to &lt;em&gt;Master&lt;/em&gt;, i.e. start Galera server on the node if not already done.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;See &lt;code&gt;man votequorum&lt;/code&gt; and &lt;a href="http://clusterlabs.org/doc/en-US/Pacemaker/1.0/html/Pacemaker_Explained/s-cluster-options.html"&gt;no-quorum-policy settings&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;Check whether &lt;code&gt;node1&lt;/code&gt; is still online with &lt;code&gt;pcs status nodes&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;Applying &lt;code&gt;pcs resource manage galeracluster&lt;/code&gt; will fail if the cluster is inquorate, and that will stop the Galera server that was manually restarted.&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Code"></category><category term="galera"></category><category term="openstack"></category></entry><entry><title>Support for Aluminium Keyboards packaged, code-named apple-kbd</title><link href="https://dciabrin.net/posts/2011/05/support-for-aluminium-keyboards-packaged-code-named-apple-kbd.html" rel="alternate"></link><published>2011-05-19T21:35:00+02:00</published><updated>2011-05-19T21:35:00+02:00</updated><author><name>Damien Ciabrini</name></author><id>tag:dciabrin.net,2011-05-19:/posts/2011/05/support-for-aluminium-keyboards-packaged-code-named-apple-kbd.html</id><summary type="html">&lt;p&gt;After many episodes, the support for Apple Aluminium Keyboards is
finally becoming user-friendly. All major distribs now ship a recent
version of
&lt;a href="http://www.freedesktop.org/wiki/Software/XKeyboardConfig"&gt;xkeyboard-config&lt;/a&gt;,
so there is no need to mess with XKB patches anymore...&lt;/p&gt;
&lt;p&gt;To complete the user experience, I'm happy to introduce you
&lt;a href="https://github.com/dciabrin/apple-kbd"&gt;&lt;code id="tt1099"&gt;apple-kbd&lt;/code&gt;&lt;/a&gt;, the
collection of helpful goodies …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After many episodes, the support for Apple Aluminium Keyboards is
finally becoming user-friendly. All major distribs now ship a recent
version of
&lt;a href="http://www.freedesktop.org/wiki/Software/XKeyboardConfig"&gt;xkeyboard-config&lt;/a&gt;,
so there is no need to mess with XKB patches anymore...&lt;/p&gt;
&lt;p&gt;To complete the user experience, I'm happy to introduce you
&lt;a href="https://github.com/dciabrin/apple-kbd"&gt;&lt;code id="tt1099"&gt;apple-kbd&lt;/code&gt;&lt;/a&gt;, the
collection of helpful goodies you need for your Aluminium Keyboard under
Linux. 
&lt;!-- PELICAN_END_SUMMARY --&gt;
Here's what you'll get with this package:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Automatic keyboard detection under X&lt;/dt&gt;
&lt;dd&gt;At boot time or when the keyboard is plugged in,
&lt;code id="tt1101"&gt;apple-kbd&lt;/code&gt; auto-updates the system-wide XKB settings so
that the X server sees the Aluminium Keyboard and enables all its
keys and its geometry.&lt;/dd&gt;
&lt;dt&gt;Key style preferences&lt;/dt&gt;
&lt;dd&gt;&lt;code id="tt1103"&gt;apple-kbd&lt;/code&gt; lets you remap some of the keyboard's keys:
you'll get back the Insert key, the antique Print, Scroll-Lock and
Pause... You can also set the precedence of functions keys over
multimedia keys.&lt;/dd&gt;
&lt;dt&gt;User-friendly installation&lt;/dt&gt;
&lt;dd&gt;Both auto-detect and configuration features are available in a
single, easy to install package. If you're running Debian or Ubuntu,
there's even a package for you which comes with interactive
configuration thanks to debconf!&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2&gt;Installing the debian package of apple-kbd&lt;/h2&gt;
&lt;p&gt;I made a &lt;a href="https://launchpad.net/~damien-ciabrini/+archive/apple-kbd"&gt;PPA on
Launchpad&lt;/a&gt; to
package &lt;code id="tt1107"&gt;apple-kbd&lt;/code&gt;, so it's super easy to install it on your
Debian or Ubuntu release. The plus of the Debian version compared to the
plain sources is that you'll get a graphical dialog to configure your
key style preferences. The dialog is also localized, only in French for
the time being, but translators are welcome!&lt;/p&gt;
&lt;h3&gt;Automatic installation for Ubuntu Natty Narwhal&lt;/h3&gt;
&lt;p&gt;To install &lt;code id="tt1109"&gt;apple-kbd&lt;/code&gt; on Natty, you basically have to follow
the instructions found on Launchpad. Just add the PPA to your list of
available locations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo add-apt-repository ppa:damien-ciabrini/apple-kbd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And once the PPA repository and its GPG key are imported, you can
install the package as usual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo apt-get update&lt;/span&gt;
&lt;span class="go"&gt;sudo apt-get install apple-kbd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first time you'll install the package, you'll be asked some
questions regarding the behaviour of the keyboard, &lt;em&gt;i.e.&lt;/em&gt;, Insert key,
PC keys emulation... At any time, you can reconfigure your keyboard by
typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo dpkg-reconfigure apple-kbd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Manual installation for the others&lt;/h3&gt;
&lt;p&gt;Oh damned, you don't run Natty (like me...)! No worries, you can still
proceed the Old Way. Just edit &lt;code id="tt1117"&gt;/etc/apt/sources.list&lt;/code&gt; and add
the following line at the end of the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;deb http://ppa.launchpad.net/damien-ciabrini/apple-kbd/ubuntu natty main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you're good to go! Resynchronize the index of available packages and
install &lt;code id="tt1120"&gt;apple-kbd&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo apt-get update&lt;/span&gt;
&lt;span class="go"&gt;sudo apt-get install apple-kbd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Don't want a Debian package? Get the sources!&lt;/h2&gt;
&lt;p&gt;The simplest way of getting &lt;a href="https://github.com/dciabrin/apple-kbd"&gt;the sources form
GitHub&lt;/a&gt; is to download the latest
&lt;code id="tt1123"&gt;apple-kbd&lt;/code&gt; archive:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;wget --no-check-certificate https://github.com/dciabrin/apple-kbd/tarball/apple-kbd-0.1 -Oapple-kbd-0.1.tar.gz&lt;/span&gt;
&lt;span class="go"&gt;tar zxvf apple-kbd-0.1.tar.gz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But you can of course fork my git repository to play with it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;git clone git://github.com/dciabrin/apple-kbd.git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Have a look at &lt;code id="tt1128"&gt;README.rst&lt;/code&gt; for the details. Basically, you
want to edit the file &lt;code id="tt1129"&gt;apple-kbd&lt;/code&gt; to configure your keyboard
preferences (Insert key, PC keyboard emulation...). Then, you need the
usual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;make&lt;/span&gt;
&lt;span class="go"&gt;sudo make install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'm unfortunately a bit lazy, so contrary to the Debian package, you
will need to reboot, or at least to re-plug the keyboard and restart the
X server for your configuration to take effect. In a future version I
will provide a command-line tool to force configuration changes to take
effect on-the-fly.&lt;/p&gt;
&lt;h2&gt;Is the support finished?&lt;/h2&gt;
&lt;p&gt;I believe &lt;code id="tt1133"&gt;apple-kbd&lt;/code&gt; is really a milestone in the support of
the Aluminium Keyboards. But of course, everything's perfectible. I
actually see two important things that remain to do. The first one is to
check whether the &lt;a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/214786"&gt;longstanding ISO-swapped-keys
bug&lt;/a&gt; is
really fixed for all the layouts. The second is to add a XKB geometry
for the Wireless Aluminium Keyboards (the short ones). Plenty of work in
perspective...&lt;/p&gt;
&lt;p&gt;So here it is, tell the world about &lt;code id="tt1135"&gt;apple-kbd&lt;/code&gt;, future will
tell if this package is useful!&lt;/p&gt;</content><category term="Code"></category><category term="apple-kbd"></category><category term="apple"></category></entry><entry><title>Apple Aluminium Keyboards with udev, Xorg server 1.9</title><link href="https://dciabrin.net/posts/2011/01/apple-aluminium-keyboards-with-udev-xorg-server-19.html" rel="alternate"></link><published>2011-01-11T22:48:00+01:00</published><updated>2011-01-11T22:48:00+01:00</updated><author><name>Damien Ciabrini</name></author><id>tag:dciabrin.net,2011-01-11:/posts/2011/01/apple-aluminium-keyboards-with-udev-xorg-server-19.html</id><summary type="html">&lt;p&gt;It's been a year now since I published my support for Aluminium
Keyboards. Since then, my XKB patches have been accepted in
&lt;a href="http://freedesktop.org/wiki/Software/XKeyboardConfig"&gt;XKeyboardConfig&lt;/a&gt;
1.9, with a few modifications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The multimedia keys can always be accessed by combining Fxx with the
    3rd level chooser (this was option &lt;code id="tt1099"&gt;alul3media&lt;/code&gt; in my …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;It's been a year now since I published my support for Aluminium
Keyboards. Since then, my XKB patches have been accepted in
&lt;a href="http://freedesktop.org/wiki/Software/XKeyboardConfig"&gt;XKeyboardConfig&lt;/a&gt;
1.9, with a few modifications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The multimedia keys can always be accessed by combining Fxx with the
    3rd level chooser (this was option &lt;code id="tt1099"&gt;alul3media&lt;/code&gt; in my
    original XKB patches)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is now a single XKB option &lt;code id="tt1101"&gt;alupckeys&lt;/code&gt; to emulate the
    behaviour of a PC keyboard, &lt;em&gt;i.e.&lt;/em&gt; to enable PrintScreen,
    ScrollLock, SysReq and NumLock (options &lt;code id="tt1103"&gt;alupcfkeys&lt;/code&gt; and
    &lt;code id="tt1104"&gt;alupcnumlock&lt;/code&gt; in the original patches)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Meanwhile, Xorg server 1.9 went stable, becoming more and more
pervasive. As far as input hotplugging is concerned, this is a major
revision for it dropped
&lt;a href="http://www.freedesktop.org/wiki/Software/hal"&gt;HAL&lt;/a&gt; in favor of
&lt;a href="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev.html"&gt;udev&lt;/a&gt;:
input discovery is achieved via udev and XKB settings for devices are
fetched from the udev database.&lt;/p&gt;
&lt;p&gt;I have thus ported the support for the Aluminium Keyboards to udev. As
before, a configuration file controls the XKB settings to apply, as well
as the remapping of the "fn" key to "insert", if requested.&lt;/p&gt;
&lt;h2&gt;Installing the udev-enabled support&lt;/h2&gt;
&lt;p&gt;First, download the &lt;a href="http://damien.ciabrini.free.fr/pub/alu-kbd-udev/95-keymap-apple-kdb.rules"&gt;necessary udev
rules&lt;/a&gt;
and install them in whatever directory your distrib uses to store user
rules. On Ubuntu, assuming that you downloaded the rules in your home
directory, this gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo cp $HOME/95-keymap-apple-kdb.rules /etc/udev/rules.d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, download the &lt;a href="http://damien.ciabrini.free.fr/pub/alu-kbd-udev/apple-kbd"&gt;configuration
file&lt;/a&gt; and
install it in your distrib's configuration directory. On Ubuntu, this
gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo cp $HOME/apple-kbd /etc/default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The configuration file contains various key-value pairs that drive the
behaviour of the Aluminium Keyboard. By default, the configuration
enables the XKB option for PC-like mapping (PrintScreen, ScrollLock,
Pause, NumLock) and maps the "fn" key to "insert". Comment out the
relevant lines to disable any of those settings if necessary.&lt;/p&gt;
&lt;h2&gt;There's a catch: what's your distrib?&lt;/h2&gt;
&lt;p&gt;The udev-enabled support assumes one thing: that you are running
xkeyboard-config 1.9 or above. Not all distribs are equal in this
regard.&lt;/p&gt;
&lt;p&gt;A quick search shows that Arch, Gentoo, Fedora or openSUSE all ship a
recent-enough xkeyboard-config. On the other hand, Debian is currently
stuck with xkeyboard-config 1.8-2 (at least for unstable, I haven't
checked experimental).&lt;/p&gt;
&lt;p&gt;The Ubuntu case is the most puzzling one. At the time of writing,
Maverick and Natty ship xkeyboard-config 1.8-1ubuntu8, which is based on
1.8 stock plus additional important commits from the git repository.
This includes my patches for the Aluminium Keyboard (!), but
unfortunately only 6 patches out of 7 have been included (!?!).
Consequently, the XKB support is currently broken for Ubuntu. I have
filled &lt;a href="https://bugs.launchpad.net/bugs/696232"&gt;bug 696232&lt;/a&gt; in Launchpad
to track this issue and check whether this was intended or not.
Meanwhile, you can grab &lt;a href="http://damien.ciabrini.free.fr/pub/alu-kbd-udev/xkb-data-1.8-evdev.patch"&gt;this XKB
patch&lt;/a&gt;
and try to apply it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo bash&lt;/span&gt;
&lt;span class="go"&gt;cd /usr/share/X11/xkb/rules&lt;/span&gt;
&lt;span class="go"&gt;patch -p0 --dry-run &amp;lt; $HOME/xkb-data-1.8-evdev.patch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the patch applies successfully, you can proceed and apply it for
real:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;patch -p0 &amp;lt; $HOME/xkb-data-1.8-evdev.patch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Steps to come&lt;/h2&gt;
&lt;p&gt;With this updated support, Aluminium Keyboards work again under recent
versions of the Xorg server, but there are still various improvements to
think about. The next step is to package the support to make it more
user-friendly. A package is definitely a good place to deal with other
keyboard options, such as kernel settings for activating multimedia keys
&lt;em&gt;vs.&lt;/em&gt; function keys.&lt;/p&gt;
&lt;p&gt;On the XKB side, it would be necessary to perform a second pass to
ensure that there are no missing or misplaced symbols on the 16 existing
keymaps: ANSI, JIS and the 14 ISO layouts.&lt;/p&gt;
&lt;p&gt;Speaking of misplaced symbols: I am currently checking whether it's
possible to come with a fully user-space, udev-based solution to the
&lt;a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/214786"&gt;"keys swapped"
issue&lt;/a&gt; that
plague some owners of the ISO variants. I have some ideas, but this will
be another post!&lt;/p&gt;</content><category term="Code"></category><category term="apple-kbd"></category><category term="apple"></category></entry><entry><title>Aluminium Keyboard support under X11: all models, all OSes</title><link href="https://dciabrin.net/posts/2009/12/aluminium-keyboard-support-under-x11-all-models-all-oses.html" rel="alternate"></link><published>2009-12-22T22:03:00+01:00</published><updated>2009-12-22T22:03:00+01:00</updated><author><name>Damien Ciabrini</name></author><id>tag:dciabrin.net,2009-12-22:/posts/2009/12/aluminium-keyboard-support-under-x11-all-models-all-oses.html</id><summary type="html">&lt;p&gt;I finally found the time to update my previous support for Aluminium
Keyboard under Xorg, and take it to the Next Level (tm). The overall
support is now much more polished. For you this means several things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I've implemented the XKB geometries of &lt;strong&gt;all variants of the long
    Aluminium Keyboard …&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I finally found the time to update my previous support for Aluminium
Keyboard under Xorg, and take it to the Next Level (tm). The overall
support is now much more polished. For you this means several things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I've implemented the XKB geometries of &lt;strong&gt;all variants of the long
    Aluminium Keyboard&lt;/strong&gt;, be it
    &lt;a href="http://damien.ciabrini.free.fr/pub/applekbd-xkb/apple-alukbd-ansi.svg"&gt;ANSI&lt;/a&gt;
    (American),
    &lt;a href="http://damien.ciabrini.free.fr/pub/applekbd-xkb/apple-alukbd-iso.svg"&gt;ISO&lt;/a&gt;
    (Internationnal) or
    &lt;a href="http://damien.ciabrini.free.fr/pub/applekbd-xkb/apple-alukbd-jis.svg"&gt;JIS&lt;/a&gt;
    (Japanese)! And believe me, it's darned complicated to support JIS
    keyboard's dual layout without having access to the real hardware :D&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I've added support for base XKB rules, which means that the keyboard
    will now be properly configured &lt;strong&gt;on other OSes than Linux&lt;/strong&gt;. I
    personally used &lt;a href="http://www.opensolaris.org/"&gt;OpenSolaris&lt;/a&gt; during my
    tests, but it should work equally well on
    &lt;a href="http://www.freebsd.org/"&gt;FreeBSD&lt;/a&gt;, &lt;a href="http://openbsd.org/"&gt;OpenBSD&lt;/a&gt;,
    and all their cousins!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The keyboard support is now &lt;strong&gt;aware of the system-wide keyboard
    settings&lt;/strong&gt; as found in Debian or Fedora for example. If you
    configured your system to default to Dvorak layout, the support will
    use it automatically!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Installing the new support&lt;/h2&gt;
&lt;p&gt;I'm short on details, but you can find a complete explanation for all
these steps in a &lt;a href="http://damienciabrini.blogspot.com/2009/05/make-your-apple-aluminium-keyboard.html"&gt;previous
post&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;XKB Patch&lt;/h3&gt;
&lt;p&gt;First of all, download &lt;a href="http://damien.ciabrini.free.fr/pub/applekbd-xkb/applekbd-xkb-support.patch.gz"&gt;this XKB
patch&lt;/a&gt;
and try to apply it on your XKB install in dry-run. For the sake of the
example, I assume you downloaded the patch in your &lt;code&gt;$HOME&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo bash&lt;/span&gt;
&lt;span class="go"&gt;cd /usr/share/X11/xkb&lt;/span&gt;
&lt;span class="go"&gt;gunzip -cd $HOME/applekbd-xkb-support.patch.gz | patch -p1 --dry-run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the patch applies successfuly, you can proceed and apply it for real:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;gunzip -cd $HOME/applekbd-xkb-support.patch.gz | patch -p1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;HAL support&lt;/h3&gt;
&lt;p&gt;Well, even if HAL is meant to be replaced sooner or later by
&lt;a href="http://fedoraproject.org/wiki/Features/DeviceKit"&gt;DeviceKit&lt;/a&gt;, that's
the way to go for the time being. So I reworked the previous HAL support
and split it in one fdi file to track your keyboard on your hardware,
plus a script to configure XKB for Aluminium Keyboard and to remap the
Fn key to Insert. To install it, first remove the fdi file from the
previous support if necessary. Then, copy this &lt;a href="http://damien.ciabrini.free.fr/pub/applekbd-xkb/10-applekbd-xkb-settings.fdi"&gt;new fdi
file&lt;/a&gt;
(which you have previously downloaded in your &lt;code&gt;$HOME&lt;/code&gt; directory) in the
relevant HAL directory. On my Ubuntu Karmic, this gives (&lt;strong&gt;update:&lt;/strong&gt;
added missing chmod, thanks Patrick):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo bash&lt;/span&gt;
&lt;span class="go"&gt;rm -f /usr/share/hal/fdi/policy/30user/10-apple-aluminium-kbd.fdi&lt;/span&gt;
&lt;span class="go"&gt;mkdir -p /usr/share/hal/fdi/policy/30user&lt;/span&gt;
&lt;span class="go"&gt;cp $HOME/10-applekbd-xkb-settings.fdi /usr/share/hal/fdi/policy/30user&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Download (I assume in your &lt;code&gt;$HOME&lt;/code&gt; directory) the &lt;a href="http://damien.ciabrini.free.fr/pub/applekbd-xkb/applekbd-xkb-settings.sh"&gt;new script for XKB
setting&lt;/a&gt;,
plus its associated &lt;a href="http://damien.ciabrini.free.fr/pub/applekbd-xkb/applekbd-xkb-settings"&gt;configuration
file&lt;/a&gt;.
Then copy them respectively in HAL's installation directory and in the
system-wide configuration directory. On my Ubuntu, ths gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo bash&lt;/span&gt;
&lt;span class="go"&gt;cp $HOME/applekbd-xkb-settings.sh /usr/lib/hal&lt;/span&gt;
&lt;span class="go"&gt;chmod +x /usr/lib/hal/applekbd-xkb-settings.sh&lt;/span&gt;
&lt;span class="go"&gt;cp $HOME/applekbd-xkb-settings /etc/default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can tweak the configuration file
&lt;code&gt;/etc/default/applekbd-xkb-settings&lt;/code&gt; to enable the settings you want for
your keyboard. By default, the Fn key is remapped to Insert. The XKB
options can be configured there for system-wide setting, as explained in
the configuration file itself. But it's more user-friendly to configure
XKB in your preferred Desktop Environment (GNOME, KDE, XFCE...
whatever).&lt;/p&gt;
&lt;h2&gt;Enjoy!&lt;/h2&gt;
&lt;p&gt;I'm particularly happy with my revised XKB geometries. A tedious work,
but this time keys dimension and layout perfectly match the original
hardware, whatever the model. I'm even more happy now that I discovered
how Apple decided to implement their EISU and KANA keys on the JIS
keyboard! If you are curious, have a look at file
&lt;code&gt;xkb/keycodes/machintosh&lt;/code&gt; in the patch, or read &lt;a href="http://forum.parallels.com/showthread.php?t=90313"&gt;this post on Parallels'
forum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The XKB patches are now ready for submission to the Xorg people
(xkeyboard-config). The rest of the files are also clean enough to start
providing .deb packages for this support! Maybe a good opportunity of
learning &lt;a href="https://help.launchpad.net/Packaging/PPA"&gt;PPA&lt;/a&gt; in
&lt;a href="https://launchpad.net/"&gt;LaunchPad&lt;/a&gt; :P&lt;/p&gt;</content><category term="Code"></category><category term="apple-kbd"></category><category term="apple"></category></entry><entry><title>Make your Apple Aluminium Keyboard really work under Linux, X.org</title><link href="https://dciabrin.net/posts/2009/05/make-your-apple-aluminium-keyboard-really-work-under-linux-xorg.html" rel="alternate"></link><published>2009-05-15T00:16:00+02:00</published><updated>2009-05-15T00:16:00+02:00</updated><author><name>Damien Ciabrini</name></author><id>tag:dciabrin.net,2009-05-15:/posts/2009/05/make-your-apple-aluminium-keyboard-really-work-under-linux-xorg.html</id><summary type="html">&lt;p&gt;Like many others, I've bought an Aluminium Keyboard for &lt;del&gt;its cool
style&lt;/del&gt; the smooth typing experience it provides. Mine is a wired
version, ISO variant (international, 110-keys). It's not working 100%
out-of-the-box under Linux, so this post explains what I did to make it
happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Supporting the additional keys (F13 …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Like many others, I've bought an Aluminium Keyboard for &lt;del&gt;its cool
style&lt;/del&gt; the smooth typing experience it provides. Mine is a wired
version, ISO variant (international, 110-keys). It's not working 100%
out-of-the-box under Linux, so this post explains what I did to make it
happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Supporting the additional keys (F13..F19) and geometry (physical
    layout) under X.org&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making the keyboard auto-configured at X.org startup. No need to
    mess with xorg.conf!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But wait, there's more. If you're accustomed to PC keyboards, you really
need those ones too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Making this fn key located on top of the delete key behave like a
    regular PC keyboard: Insert!&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making multimedia keys output Fxx symbols by default&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making F13..F15 behave like those charmingly obsolete Scroll
    Lock..Print Screen keys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keeping the multimedia keys accessible when the fn key is remapped
    to Insert&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Prerequisite&lt;/h2&gt;
&lt;p&gt;First, make sure you have installed all the packages below and that
their versions are recent enough:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/Xserver"&gt;xserver-xorg&lt;/a&gt;
    v1.5.2, X.org's hotplug-aware X server&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cgit.freedesktop.org/xorg/driver/xf86-input-evdev"&gt;xserver-xorg-input-evdev&lt;/a&gt;
    v2.0.xx, evdev driver for input devices&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/hal"&gt;HAL&lt;/a&gt; v0.5.xx, the
    hardware abstraction layer daemon which gives hotplug information to
    the X server&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How the support works&lt;/h2&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;p&gt;Go grab &lt;a href="http://damien.ciabrini.free.fr/pub/apple-alu-kbd/xkb-apple-aluminium-kdb-iso.patch.gz"&gt;this
patch&lt;/a&gt;
and save it in your home directory; it contains the relevant XKB updates
to support the keymap and the geometry of Apple Aluminium keyboard, ISO
variant. It also defines two XKB options to make this keyboard behave
more like a PC keyboard (more on that later). To install it, first
&lt;em&gt;pretend&lt;/em&gt; to apply the patch in the directory that holds the XKB data.
On my Ubuntu, this gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo bash&lt;/span&gt;
&lt;span class="go"&gt;cd /usr/share/X11/xkb&lt;/span&gt;
&lt;span class="go"&gt;gunzip -cd $HOME/xkb-apple-aluminium-kdb-iso.patch.gz | patch -p1 --dry-run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the patch applies successfuly, you can proceed and apply it for real:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;gunzip -cd $HOME/xkb-apple-aluminium-kdb-iso.patch.gz | patch -p1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you have the relevant XKB definition for your keyboard, you need to
tell X.org to apply these settings automatically when it detects your
keyboard. &lt;a href="http://damien.ciabrini.free.fr/pub/apple-alu-kbd/10-apple-aluminium-kbd.fdi"&gt;The following HAL fdi
file&lt;/a&gt;
makes the necessary voodoo (read: XKB settings) for you. Note that these
settings do not preclude your system-wide XKB options.&lt;/p&gt;
&lt;p&gt;In order to install the fdi file I'm providing, just copy it in the HAL
directory which holds user-defined policies for devices. On my Ubuntu,
this directory is &lt;code&gt;/usr/share/hal/fdi/policy/30user&lt;/code&gt;. You might need to
create &lt;code&gt;30user&lt;/code&gt; if it doesn't exist.&lt;/p&gt;
&lt;h3&gt;Test&lt;/h3&gt;
&lt;p&gt;Now that you installed everything, restart HAL. For example, on a
Debian-like distro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo /etc/init.d/hal restart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then log out from your current X session and start a new one. If
everything went well, you should now be able to see the Aluminium
Keyboard in your keyboard preferences application. The screenshots below
show the result under GNOME:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="https://dciabrin.net/posts/2009/05/alukbd-preferences.png"&gt;&lt;img alt="preferences" src="https://dciabrin.net/posts/2009/05/alukbd-preferences.png"&gt;&lt;/a&gt;
&lt;a href="https://dciabrin.net/posts/2009/05/alukbd-geometry.png"&gt;&lt;img alt="geometry" src="https://dciabrin.net/posts/2009/05/alukbd-geometry.png"&gt;&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Make it a PC keyboard!&lt;/h2&gt;
&lt;h3&gt;The Insert key hack&lt;/h3&gt;
&lt;p&gt;The fn key is not seen by X because its keycode (464) is greater than
255, &lt;a href="http://bugs.freedesktop.org/show_bug.cgi?id=x11-keycode-limit"&gt;which is not
allowed&lt;/a&gt;
in X11 protocol. But there is a trick: under Linux, you can modify the
kernel scancode→keycode mapping of your evdev device!&lt;/p&gt;
&lt;p&gt;Just uncomment the two optional lines in the &lt;a href="http://damien.ciabrini.free.fr/pub/apple-alu-kbd/10-apple-aluminium-kbd.fdi"&gt;fdi
file&lt;/a&gt;
I'm providing to make the fn scancode (HID usage 0xff0003 on this
keyboard) generate the Insert keycode (110) in userland and make Xorg
happy :D&lt;/p&gt;
&lt;p&gt;For curious people:
&lt;a href="http://thread.gmane.org/gmane.comp.freedesktop.hal/8615/focus=8615"&gt;Initially&lt;/a&gt;
(funny how these names look familiar if you read
&lt;a href="http://planet.gnome.org/"&gt;p.g.o&lt;/a&gt;...), HAL's keycode remapping seems to
have been designed with &lt;a href="http://www.win.tue.nl/%7Eaeb/linux/kbd/scancodes-1.html"&gt;AT
scancodes&lt;/a&gt; in
mind, not HID usages. In order to override those ones, you must &lt;a href="http://thread.gmane.org/gmane.comp.freedesktop.hal/8615/focus=8687"&gt;revert
a special
encoding&lt;/a&gt;
performed for representing AT escape scancodes. In our case, you end up
remapping usage 0xffdf83!&lt;/p&gt;
&lt;h3&gt;Fxx keys enabled by default&lt;/h3&gt;
&lt;p&gt;This one is not new. In order to boot with Fxx keys enabled, you must
pass an option to the &lt;code&gt;hid&lt;/code&gt; Linux module. On my Ubuntu, this can be done
by updating modprobe options and rebuilding an &lt;code&gt;initrd&lt;/code&gt; image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sudo bash&lt;/span&gt;
&lt;span class="go"&gt;echo &amp;quot;options hid pb_fnmode=2&amp;quot; &amp;gt;&amp;gt; /etc/modprobe.d/alukbd&lt;/span&gt;
&lt;span class="go"&gt;echo &amp;quot;options hid_apple fnmode=2&amp;quot; &amp;gt;&amp;gt; /etc/modprobe.d/alukbd&lt;/span&gt;
&lt;span class="go"&gt;update-initramfs -k `uname -r` -u&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Additional PC-like XKB options&lt;/h3&gt;
&lt;p&gt;The XKB patch I'm providing defines two new XKB options:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;apple:alupcfkeys&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;If you need to map F13..F15 to Scroll Lock..Print Screen keys (I
won't judge you, I swear :P)&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;apple:alul3media&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;If you remap fn to Insert, this options allows you to access the
multimedia keys is by typing 3rd-level chooser + Fxx key. I've
mapped my 3rd-level chooser to the right Alt key (XKB option
&lt;code&gt;lv3:ralt_switch&lt;/code&gt; )&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Naturally, the simplest way of using these XKB options is to enable them
via your keyboard preferences application. For instance, GNOME users can
find them in the Keyboard Layout Options:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="https://dciabrin.net/posts/2009/05/alukbd-options.png"&gt;&lt;img alt="options" src="https://dciabrin.net/posts/2009/05/alukbd-options.png"&gt;&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;My XKB and HAL settings provide complete support for your Aluminium
Keyboard on Xorg Linux. However, the Insert key hack is probably not
mainstream and ultimately should not land in a fdi file. It would be
better to make a distro package such as “enable PC-support on Aluminium
Keyboard”.&lt;/p&gt;
&lt;p&gt;The XKB geometry implemented is for the ISO variant. if you have one of
the other variant and like to throw it away, you know I'd be happy to
add support for it, eheh :P&lt;/p&gt;</content><category term="Code"></category><category term="apple-kbd"></category><category term="apple"></category></entry><entry><title>Toolchain.sh is amazing!</title><link href="https://dciabrin.net/posts/2009/02/toolchainsh-is-amazing.html" rel="alternate"></link><published>2009-02-23T21:53:00+01:00</published><updated>2009-02-23T21:53:00+01:00</updated><author><name>Damien Ciabrini</name></author><id>tag:dciabrin.net,2009-02-23:/posts/2009/02/toolchainsh-is-amazing.html</id><summary type="html">&lt;p&gt;A few weeks ago, I finally upgraded my iPhone to firwmare 2.2.1. It was
actually an utterly painless operation, thanks to the amazing
&lt;a href="http://code.google.com/p/iphonedevonlinux/wiki/Installation"&gt;toolchain.sh&lt;/a&gt;
by the guys from
&lt;a href="http://code.google.com/p/iphonedevonlinux/"&gt;iphonedevlinux&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;I remember in the 1.1.4 days, I had a hard time extracting the MacOS
10.5 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few weeks ago, I finally upgraded my iPhone to firwmare 2.2.1. It was
actually an utterly painless operation, thanks to the amazing
&lt;a href="http://code.google.com/p/iphonedevonlinux/wiki/Installation"&gt;toolchain.sh&lt;/a&gt;
by the guys from
&lt;a href="http://code.google.com/p/iphonedevonlinux/"&gt;iphonedevlinux&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;I remember in the 1.1.4 days, I had a hard time extracting the MacOS
10.5 SDK on Linux and compiling the openSDK on my Core2 Quad by
following &lt;a href="http://www.saurik.com/id/4"&gt;saurik's great instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It turns out that building an open SDK for firmware 2.2.1 is actually
very simple: getting a copy of the phone's sysroot, building GCC,
importing headers from the official iphone SDK, classdumping private
frameworks... all these operations are now almost automatic thanks to
toolchain.sh.&lt;/p&gt;
&lt;p&gt;The icing on the cake: those smart people from
&lt;a href="http://code.google.com/p/iphonedevonlinux/"&gt;iphonedevlinux&lt;/a&gt; are
friendly and reactive! Another good reason for
&lt;a href="http://code.google.com/p/iphonedevonlinux/issues/detail?id=7"&gt;sending&lt;/a&gt;
&lt;a href="http://code.google.com/p/iphonedevonlinux/issues/detail?id=6&amp;amp;can=1#c15"&gt;them&lt;/a&gt;
&lt;a href="http://code.google.com/p/iphonedevonlinux/issues/detail?id=10"&gt;patches&lt;/a&gt;
and using their script :)&lt;/p&gt;</content><category term="Code"></category><category term="iphone"></category><category term="apple"></category></entry><entry><title>Hello MikMod!</title><link href="https://dciabrin.net/posts/2008/07/hello-mikmod.html" rel="alternate"></link><published>2008-07-05T00:27:00+02:00</published><updated>2008-07-05T00:27:00+02:00</updated><author><name>Damien Ciabrini</name></author><id>tag:dciabrin.net,2008-07-05:/posts/2008/07/hello-mikmod.html</id><summary type="html">&lt;p&gt;As promised earlier, I've packaged an obligatory example of how to use
the iPhone port of &lt;a href="http://mikmod.raphnet.net/"&gt;libmikmod&lt;/a&gt; which I've
talked about recently. Go grab &lt;a href="http://damien.ciabrini.free.fr/pub/mikmod-iphone/HelloMikMod.tar.gz"&gt;this
tarball&lt;/a&gt;
which implements a very simple "Hello World!":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It shows how to play a module within a
    &lt;a href="http://www.cocoadev.com/index.pl?UIKit"&gt;UIKit&lt;/a&gt; application. This is
    an adaptation of the …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;As promised earlier, I've packaged an obligatory example of how to use
the iPhone port of &lt;a href="http://mikmod.raphnet.net/"&gt;libmikmod&lt;/a&gt; which I've
talked about recently. Go grab &lt;a href="http://damien.ciabrini.free.fr/pub/mikmod-iphone/HelloMikMod.tar.gz"&gt;this
tarball&lt;/a&gt;
which implements a very simple "Hello World!":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It shows how to play a module within a
    &lt;a href="http://www.cocoadev.com/index.pl?UIKit"&gt;UIKit&lt;/a&gt; application. This is
    an adaptation of the skeleton program found in &lt;a href="http://http//mikmod.raphnet.net/#docs"&gt;MikMod
    Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It shows how to use the higher level sound API
    &lt;a href="http://www.cocoadev.com/index.pl?CelestialFramework"&gt;Celestial&lt;/a&gt; to
    control mikmod output. For instance, how to react to volume change
    events when iPhone buttons are pressed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;What to do with this archive once you've extracted it?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;tar -zxf HelloMikMod.tar.gz&lt;/span&gt;
&lt;span class="go"&gt;cd HelloMikMod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple! Modify the Makefile to set the location of the &lt;span
style="font-family:courier new;"&gt;AudioQueue.h&lt;/span&gt; header, as well as
the location where you've installed libmikmod. Once you're done, the
makefile should look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# directory where AudioQueue.h is located&lt;/span&gt;
&lt;span class="nv"&gt;AQDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;HOME&lt;span class="k"&gt;)&lt;/span&gt;/local/audioqueue
&lt;span class="c"&gt;# directory where MikMod is located&lt;/span&gt;
&lt;span class="nv"&gt;MMDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;HOME&lt;span class="k"&gt;)&lt;/span&gt;/local/mikmod-iphone
&lt;span class="c"&gt;# comment the following line when the previous settings are OK for you&lt;/span&gt;
&lt;span class="c"&gt;#$(error configure AudioQueue and Mikmod location in the Makefile first)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, just build and install the app by typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;make&lt;/span&gt;
&lt;span class="go"&gt;scp -r HelloMikMod.app root@iphone:/Applications&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where &lt;span style="font-family:courier new;"&gt;iphone&lt;/span&gt; stands for
the hostname or the IP of your iPhone. Note that you will need either
curl or wget installed or your machine so that the build process is able
to download the module played in this example app (fortunately, one of
those should always be available on MacOS X or on your favorite Linux
distro). For your convenience, the &lt;span
style="font-family:courier new;"&gt;HelloMikMod.app&lt;/span&gt; directory is
standalone: it contains the app itself linked statically to libmikmod, a
launcher descriptor for Springboard and the module to play. For my own
pleasure, the mod played is &lt;a href="http://modarchive.org/module.php?59344"&gt;Stardust
Memories&lt;/a&gt; by Jester / Sanity, my
all time favorite Amiga mod (see the compo &lt;a href="http://www.pouet.net/prod.php?which=2938"&gt;World of
Commodore&lt;/a&gt;). This is only a
simple example of how to use MikMod on iPhone. I've started implementing
a more complex app that mimics the iPod interface for playing mods
(Module DB, Screenshot of associated demos...). Now if only I could use
&lt;a href="http://www.scenemusic.net/"&gt;Nectarine&lt;/a&gt; or
&lt;a href="http://pouet.net/"&gt;Pouet.net&lt;/a&gt; DB to make some kind of systematic
indexing available!! (sigh....)&lt;/p&gt;</content><category term="Code"></category><category term="apple-kbd"></category><category term="apple"></category></entry><entry><title>MikMod library ported to iPhone</title><link href="https://dciabrin.net/posts/2008/06/mikmod-library-ported-to-iphone.html" rel="alternate"></link><published>2008-06-27T23:18:00+02:00</published><updated>2008-06-27T23:18:00+02:00</updated><author><name>Damien Ciabrini</name></author><id>tag:dciabrin.net,2008-06-27:/posts/2008/06/mikmod-library-ported-to-iphone.html</id><summary type="html">&lt;p&gt;I've always been a big fan of old skool computer music, like chiptunes
or demoscene music. Perhaps because they remind me the Good Old Days
(tm) of my &lt;a href="http://en.wikipedia.org/wiki/Amiga"&gt;Amiga&lt;/a&gt;. Or perhaps for
the same reason I like &lt;a href="http://pouet.net/"&gt;demoscene&lt;/a&gt;: real-time
computer art! Because it's definitely cool, I've decided to port MikMod …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've always been a big fan of old skool computer music, like chiptunes
or demoscene music. Perhaps because they remind me the Good Old Days
(tm) of my &lt;a href="http://en.wikipedia.org/wiki/Amiga"&gt;Amiga&lt;/a&gt;. Or perhaps for
the same reason I like &lt;a href="http://pouet.net/"&gt;demoscene&lt;/a&gt;: real-time
computer art! Because it's definitely cool, I've decided to port MikMod
to the iPhone! We'll see later if it might be useful to someone else :)&lt;/p&gt;
&lt;h2&gt;Compiling libmikmod&lt;/h2&gt;
&lt;p&gt;Here are the steps to follow to build libmikmod for your iPhone or iPod Touch. First of all, make sure that
you have the necessary header file from Apple, namely &lt;code&gt;AudioQueue.h&lt;/code&gt;. This file is part of the AudioQueue
framework, which is available in the &lt;a href="http://developer.apple.com/tools/download"&gt;MacOS X 10.5 SDK&lt;/a&gt;. This means
that the official iPhone SDK is not required. Then, download the latest
&lt;a href="http://mikmod.raphnet.net/files/libmikmod-3.2.0-beta2.tar.gz"&gt;libmikmod-3.2.0-beta2&lt;/a&gt; available on the &lt;a href="http://mikmod.raphnet.net/"&gt;MikMod
homepage&lt;/a&gt;, as well as &lt;a href="http://damien.ciabrini.free.fr/pub/mikmod-iphone/iphone-drv-mikmod-3.2.0-beta2.patch.gz"&gt;this patch for iPhone
support&lt;/a&gt;.  For
simplicity, let's consider that both files will be downloaded in the same directory. Once you have them,
extract the archive and apply the patch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;tar -zxf libmikmod-3.2.0-beta2.tar.gz&lt;/span&gt;
&lt;span class="go"&gt;cd libmikmod-3.2.0-beta2&lt;/span&gt;
&lt;span class="go"&gt;gunzip -cd ../iphone-drv-mikmod-3.2.0-beta2.patch.gz | patch -p1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Among other things, the patch modifies various Makefiles and the
configure script, so we have to cleanly regenerate all the
autotool-related files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;aclocal&lt;/span&gt;
&lt;span class="go"&gt;automake&lt;/span&gt;
&lt;span class="go"&gt;autoconf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's set up the necessary environment variables to configure and
build libmikmod. First, where to find the AudioQueue header and where to
install libmikmod:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;export AQDIR=$HOME/local/audioqueue&lt;/span&gt;
&lt;span class="go"&gt;export MMDIR=$HOME/local/mikmod-iphone&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you are using absolute paths for the variables above. Then,
let's set up some compilation flags and name the tools we'll use from
the iPhone toolchain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;export CFLAGS=&amp;quot;-I$AQDIR -DAVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER=&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;export CPPFLAGS=&amp;quot;$CFLAGS&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;export LDFLAGS=&amp;quot;-framework AudioToolbox&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;export CC=arm-apple-darwin-gcc&lt;/span&gt;
&lt;span class="go"&gt;export RANLIB=arm-apple-darwin-ranlib&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, now it's time to let configure do its job:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;./configure --enable-iphone --host=arm-apple-darwin --disable-oss --disable-esd --prefix=$MMDIR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We're almost done! But there's still a little quirk that must be
addressed. The project is configured to build shared libraries, which
for some reason refuse to link with the version of the open-source
iPhone toolchain I use. To overcome this problem, you just need to patch
the generated libtool configuration. Knowing no clever means to do so, I
propose something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;sed -r -i &amp;#39;s/^(allow_undefined_flag.*)&amp;quot;/\1 -Wl,-read_only_relocs,suppress&amp;quot;/&amp;#39; libtool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Phew, now we're done! Just type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;make CFLAGS=&amp;quot;$CFLAGS&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;make install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And voila! a fresh libmikmod with support for your beloved iPhone or
iPod Touch! Oh, by the way: the library comes in both static and dynamic
flavor, so it should be pretty usable. Of course, the obligatory example
will follow soon :P
&lt;strong&gt;EDIT:&lt;/strong&gt; the link to the patch was pointing to a plain file instead of a gzip one,
fixed!&lt;/p&gt;</content><category term="Code"></category><category term="apple-kbd"></category><category term="apple"></category></entry><entry><title>Hello World!</title><link href="https://dciabrin.net/posts/2008/06/hello-world.html" rel="alternate"></link><published>2008-06-19T21:44:00+02:00</published><updated>2008-06-19T21:44:00+02:00</updated><author><name>Damien Ciabrini</name></author><id>tag:dciabrin.net,2008-06-19:/posts/2008/06/hello-world.html</id><summary type="html">&lt;p&gt;I'm opening this blog to share my bits of code, hacks or thoughts I have
during the time I spend in front of my computer. That will be a great
occasion for me to retrieve all the goodies laying in my attic and that
I should take the time to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm opening this blog to share my bits of code, hacks or thoughts I have
during the time I spend in front of my computer. That will be a great
occasion for me to retrieve all the goodies laying in my attic and that
I should take the time to package cleanly! Moreover, that will be a good
way of talking about the cool things I work on nowadays... Okay, I
know... it sounds so vague... but hey, it's only a Hello World after all
:)&lt;/p&gt;</content><category term="Misc"></category></entry></feed>