{"pages":[{"url":"http://damien.ciabrini.name/pages/about.html","text":"Welcome here! Heya I'm Damien, and this is my home page for discussing things I'm working on or projects I care about. [TODO] write a serious About page...","tags":"pages","title":"About"},{"url":"http://damien.ciabrini.name/posts/2016/03/troubleshooting-open_files_limit-in-mariadb.html","text":"It may happen in the MariaDB logs that you see failures to set open_files_limit : 160318 21:48:04 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 160318 21:48:04 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 160318 21:48:04 [Warning] Could not increase number of max_open_files to more than 1024 (request: 4907) Meaning MariaDB was unable to raise the limit of maximum file descriptors at startup, with all the subsequent problems it can cause. Sometimes it is simply due to a bad setting in configuration files, such as: open_files_limit=-1 How MariaDB processes option open_files_limit When started, MariaDB follows an internal logics to set the limit of file descriptor to use at run-time: It computes the minimum number of wanted_files , whichever is the biggest from: fd needed by MariaDB and innodb (based on some heuristics) 5 * max_connections as set in config file It sets the new process limit ( setrlimit ) to whichever is the biggest: wanted_files as computed above or value of option open_files_limit (e.g. set in server.cnf) Now, if the MariaDB configuration files contain a line like: open_files_limit=-1 The signed value will be adjusted automatically by MariaDB to match the expected uint range: 160105 9:10:50 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 160105 9:10:50 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 The side effect is that setrlimit will now be called with 4294967295, which fails with EPERM 1 even when run as root because the requested value which is above system limits. The per-process limit will thus stick to the default, which is usually 1024 fd. MariaDB will signal the failure by logging the value originally computed for wanted_files : 160105 9:10:50 [Warning] Could not increase number of max_open_files to more than 1024 (request: 9003) Config file or command line One noteworthy detail is that one can ask MariaDB to raise the file descriptors limit at the command line as well, with argument --open-files-limit=XXX . In fact, at MariaDB startup, mysqld_safe scans both configuration file and command line for option open_files_limit and if found, it will pass that value 2 explicitly at command line when it spawns the mysqld server. The mysqld server itself first parses options specified in the configuration files, and after that those coming from the command line. Given the way mysqld_safe parses option open_files_limit , you can see that the mysqld server will parse the option twice if it comes from the configuration file. Concrete examples from the logs Back to the original example from this article: 160318 21:48:04 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 160318 21:48:04 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 160318 21:48:04 [Warning] Could not increase number of max_open_files to more than 1024 (request: 4907) You can extract from those logs that option open_files_limit was set to -1 somewhere in the config files, and that no command line option --open-files-limit was passed to mysqld_safe to override it. When parsing the options, mysqld logged a bound check warning for the value coming from the configuration file, and another one for the value forwarded by mysqld_safe via the command line. Corrected value was too high for setrlimit , which consequently failed. Another pattern that can arise is when MariaDB is used with Galera replication. At startup, mysqld_safe needs to run mysqld once with special flags to recover the replication position of the galera node. It then start mysqld a second time with the proper replication start position. This has the effect of having twice as many warning messages in the logs. 160322 13:07:14 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql 160322 13:07:14 mysqld_safe WSREP: Running position recovery with --log_error='/var/lib/mysql/wsrep_recovery.uuL8VZ' --pid-file='/var/lib/mysql/db2-recover.pid' 160322 13:07:14 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 160322 13:07:14 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 160322 13:07:14 [Warning] Could not increase number of max_open_files to more than 1024 (request: 2859) 160322 13:07:16 mysqld_safe WSREP: Recovered position c87b7e3e-ec54-11e5-92b3-16a45d02f190:5 160322 13:07:16 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 160322 13:07:16 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 160322 13:07:16 [Note] WSREP: wsrep_start_position var submitted: 'c87b7e3e-ec54-11e5-92b3-16a45d02f190:5' 160322 13:07:16 [Warning] Could not increase number of max_open_files to more than 1024 (request: 2859) If MariaDB/Galera is started with a valid --open-files-limit argument at the command line, you will only see one bound check warning in the logs per mysqld run: 160322 13:23:22 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql 160322 13:23:22 mysqld_safe WSREP: Running position recovery with --log_error='/var/lib/mysql/wsrep_recovery.WAKIoR' --pid-file='/var/lib/mysql/db2-recover.pid' 160322 13:23:22 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 160322 13:23:24 mysqld_safe WSREP: Recovered position c87b7e3e-ec54-11e5-92b3-16a45d02f190:5 160322 13:23:24 [Warning] option 'open_files_limit': unsigned value 18446744073709551615 adjusted to 4294967295 Checking whether open_files_limit setting is active In order to change open_files_limit , you should start MariaDB as root and use option --user to let mysqld switch to the requested user after setting limits. If you don't see complaints in the logs, open_files_limit setting should be applied. Under Linux, a quick means of verifying that is to probe the running mysqld process: # cat /proc/$(pidof /usr/libexec/mysqld)/limits | grep -e Limit -e 'open files' Limit Soft Limit Hard Limit Units Max open files 10245 10245 files Likewise, the mysql client will return the limit that has been successfully set: # mysql -e \"SHOW VARIABLES LIKE 'open_files_limit';\" +------------------+-------+ | Variable_name | Value | +------------------+-------+ | open_files_limit | 10245 | +------------------+-------+ Don't be surprised if you don't see the exact value you specified for open_files_limit . Remember that MariaDB will call setrlimit with the highest value between wanted_files and open_files_limit . If Soft Limit or the mysql client reports something like 1024, that means mysqld did not raise the maximum file descriptor limit appropriately, and the logs should contain enough information to find out why. From setrlimit man: EPERM The caller tried to increase the hard RLIMIT_NOFILE limit above the maximum defined by /proc/sys/fs/nr_open (see proc(5)) ↩ If set in configuration file and at the command line, the latter takes precedence over the former ↩","tags":"Code","title":"Troubleshooting open_files_limit in MariaDB"},{"url":"http://damien.ciabrini.name/posts/2015/10/galera-boot-process-in-open-stack-ha-and-manual-override.html","text":"Deployments of OpenStack that rely on MariaDB+Galera benefit from a HA database thanks to Galera's synchronous replication. In such deployments, the Galera cluster is typically managed via Pacemaker, by means of a galera resource agent. While Galera itself has its own notion of cluster management (membership, health check, write-set replication...), a resource agent is still necessary for Pacemaker to perform the basic cluster management duties, for example: Starting up the Galera servers on the available nodes in the cluster Health monitoring and recovery actions on failure (e.g. fencing) This document describes the concepts involved in booting a Galera cluster, how the galera resource agent implements the boot process of a galera cluster, and how it can be overriden for recovery scenarios. Galera cluster overview A Galera cluster is identified by a cluster address, stored in the configuration variable wsrep_cluster_address . The value of this variable is a URI identifying all the nodes that can potentially be member of the cluster. For example: wsrep_cluster_address=gcomm://node1,node2,node3 It is used by MariaDB at boot time to register to the cluster and to synchronize its local database with the cluster. The value of wsrep_cluster_address conveys a special meaning which can be used to either start a cluster or rejoin it. Galera boot process explained Galera replicates database writes across all nodes of the cluster. A write succeeds if more than half of the nodes in the cluster acknowledge it (quorum). On success, a global counter representing the most recent transaction is incremented: this is called the last sequence number, or seqno. Desynchronized nodes or newly joining nodes will automatically sync their local database to this last sequence number. In order to restart an existing Galera cluster, one needs first to identify a node whose local database contains the latest transaction acknowleged by the cluster, i.e. the one with the biggest seqno. Once identified, MariaDB can be started on the node with option: wsrep_cluster_address=gcomm:// This bootstraps a new cluster 1 from this node's local state: the node becomes the new Primary partition, which means the remaining nodes will sync against this new cluster when started with wsrep_cluster_address=gcomm://node1,node2,node3 . How the resource agent boots the cluster The resource agent encodes the process of booting a Galera cluster as a series of unitary steps; electing a bootstrap node, booting Galera servers in sequence, and marking nodes as available in the clusters. It tracks those steps via Pacemaker's multi-state resource plus various attributes stored in Pacemaker's Cluster Information Base (CIB). In order to boot or restart a Galera cluster, the resource agent needs to retrieve the last seqno of all the nodes in the clusters. Without that information, the resource agent cannot safely identify a bootstrap node and it won't tell Pacemaker to start the Galera cluster. The boot process works as follows: When a galera resource is in state Started , the resource agent retrieves the last seqno from the local MariaDB, stores it in the CIB and goes to Slave state. At this stage, no Galera server is running. Once all the nodes are in Slave state, the resource agent elects the bootstrap node, tags it in the CIB, and tells Pacemaker that it can promote the galera resource on this node to the Master state. When Pacemaker promotes the bootstrap node, the resource agent starts the Galera server, which bootstraps a new cluster. It then marks the remaining nodes as being ready for promotion. The resource on the bootstrap node is switched to Master , and the Galera cluster is ready to accept SQL queries. Pacemaker promotes the remaining nodes. For each node, the resource agent start a Galera server, which synchronizes its local state with the cluster via a State Snapshot Transfer (SST). This operation can take some time. The promotion to Master finishes when the synchronization is over and the Galera server is ready to accept SQL queries. At this stage, the entire cluster is up and running, and the galera resource is set Master on all nodes. Note: the notion of Master/Slave state is completely different from Galera's notion of Primary / Non-primary state A Galera node is in primary state if it belongs to a partition of the cluster which has quorum (and is thus active) If a Galera node detects the partition it belongs to is inquorate, it will switch to Non-primary state, and SQL queries will fail 2 . Overriding the boot process The resource agent expects all the nodes to be available for performing a boot. However, there are times where this is not the case and for practical reasons it is necessary to force the boot process. Here are examples of manual override scenarios, with steps to perform to bring the Galera cluster up. They apply on a three-node Pacemaker cluster, composed of nodes node1 , node2 , node3 . In this Pacemaker cluster, the Galera resource is called galeracluster . Scenario 1: Galera cluster to be restarted, but one node won't come up Suppose that node3 in the cluster is unavailable following an unexpected event (e.g. Galera crashed and left in a inconsistent state, hardware failure on node3 ). In such case, the resource agent is not able to retrieve all seqno in the cluster, so no bootstrap node can be elected, and cluster won't restart. One can force the election of a bootstrap node and start it, in order to unblock the resource agent and let Pacemaker boot the rest of the Galera cluster. Do the following steps only if you're sure that the forced bootstrap node is up-to-date, otherwise you will permanently desynchronise your cluster and will lose data! That being said, to unblock the boot process, you will need to elect and promote a bootstrap node manually. So first, take control of Galera away from Pacemaker: [root@node1 ~]# pcs resource unmanage galeracluster Next, identify the node with the most recent seqno. If Pacemaker previously tried to restart the cluster, you can retrieve this information in the CIB, e.g. for node1 : [root@node1 ~]# crm_attribute -N node1 -l reboot --name galeracluster-last-committed -Q If the last seqno is not present in the CIB 3 , you can retrieve it with MariaDB: [root@node1 ~]# mysqld_safe --wsrep-recover 151002 13:59:35 mysqld_safe Logging to '/var/log/mariadb/mariadb.log'. 151002 13:59:35 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql 151002 13:59:35 mysqld_safe WSREP: Running position recovery with --log_error='/var/lib/mysql/wsrep_recovery.2FkYLQ' --pid-file='/var/lib/mysql/db1-recover.pid' 151002 13:59:50 mysqld_safe WSREP: Recovered position 4c7ba2a8-566a-11e5-8250-1e939ac17c77:9 151002 13:59:52 mysqld_safe mysqld from pid file /var/run/mariadb/mariadb.pid ended MariaDB will recover its last known cluster position as UUID:seqno . In our case, on node1 the last seqno is thus 9 . Once you determine which node has the bigger seqno , make it the bootstrap node and force Pacemaker to start Galera by switching the resource's state to Master . In our case, assuming node1 is the bootstrap node, connect to node1 and run the following commands locally: [root@node1 ~]# crm_attribute -N node1 -l reboot --name galeracluster-bootstrap -v true [root@node1 ~]# crm_attribute -N node1 -l reboot --name master-galeracluster -v 100 [root@node1 ~]# crm_resource --force-promote -r galeracluster -V Then, instruct Pacemaker to re-detect the current state of the galera resource. This will clean up failcount and purge knowledge of past failures: [root@node1 ~]# pcs resource cleanup galeracluster At this point Galera is up and Pacemaker knows that it is up. Give back control of Galera to Pacemaker and the remaining node will join automatically 4 : [root@node1 ~]# pcs resource enable galeracluster [root@node1 ~]# pcs resource manage galeracluster Scenario 2: Multiple hardware failures, keep service on the remaining node If node2 and node3 fail successively in the three-node cluster, you may end up with only node1 up and running. Pacemaker will react differently to this condition depending on how quorum is configured in the cluster 5 . For Galera, things are less flexible: if two nodes out of three quit the cluster unexpectedly, the remaining node is considered inquorate and the Galera server will switch to Non-primary state. This is an error condition for the resource agent, and that causes Pacemaker to stop the Galera on the remaining node. You can force the restart of Galera on node1 if this node is still up and running in Pacemaker 6 . You just need to bootstrap the Galera cluster by applying similar steps as those described in Scenario 1. Please only do so if you are sure that the node is in sync with the latest revision of the cluster, otherwise you will lose data . Apply the step from Scenario 1 and stop before giving back control to Pacemaker 7 . At this point, check whether the Pacemaker cluster has quorum: [root@node1 ~]# corosync-quorumtool -s Quorum information ------------------ Date: Fri Oct 2 18:20:37 2015 Quorum provider: corosync_votequorum Nodes: 1 Node ID: 1 Ring ID: 1376 Quorate: No Votequorum information ---------------------- Expected votes: 3 Highest expected: 3 Total votes: 1 Quorum: 2 Activity blocked Flags: Membership information ---------------------- Nodeid Votes Name 1 1 node1 (local) If it doesn't, you have to unblock quorum temporarily for Pacemaker to manage resources, i.e. set the number of expected votes the the number of nodes which are still on-line. In our example, only node1 is on-line, so quorum can be temporarily unblocked with: [root@node1 ~]# corosync-quorumtool -e1 Note that this setting is not definitive. As soon as other nodes rejoin, the number of expected votes will get back to the original value (3 in the example). Once the cluster is quorate again, you can give back control of Galera to Pacemaker: [root@node1 ~]# pcs resource manage galeracluster Starting a new cluster can also be achieved with --wsrep_new_cluster . The two options are equivalent. ↩ Data-related SQL queries will fail with ERROR 1047 (08S01): WSREP has not yet prepared node for application use . ↩ If the information is not in the CIB, crm_attribute will report an error like Error performing operation: No such device or address . ↩ pcs resource enable galeracluster will ensure that Pacemaker always try to promote this resource's state to Master , i.e. start Galera server on the node if not already done. ↩ See man votequorum and no-quorum-policy settings . ↩ Check whether node1 is still online with pcs status nodes . ↩ Applying pcs resource manage galeracluster will fail if the cluster is inquorate, and that will stop the Galera server that was manually restarted. ↩","tags":"Code","title":"Galera boot process in Open Stack HA and manual override"},{"url":"http://damien.ciabrini.name/posts/2011/05/support-for-aluminium-keyboards-packaged-code-named-apple-kbd.html","text":"After many episodes, the support for Apple Aluminium Keyboards is finally becoming user-friendly. All major distribs now ship a recent version of xkeyboard-config , so there is no need to mess with XKB patches anymore... To complete the user experience, I'm happy to introduce you apple-kbd , the collection of helpful goodies you need for your Aluminium Keyboard under Linux. Here's what you'll get with this package: Automatic keyboard detection under X At boot time or when the keyboard is plugged in, apple-kbd auto-updates the system-wide XKB settings so that the X server sees the Aluminium Keyboard and enables all its keys and its geometry. Key style preferences apple-kbd lets you remap some of the keyboard's keys: you'll get back the Insert key, the antique Print, Scroll-Lock and Pause... You can also set the precedence of functions keys over multimedia keys. User-friendly installation Both auto-detect and configuration features are available in a single, easy to install package. If you're running Debian or Ubuntu, there's even a package for you which comes with interactive configuration thanks to debconf! Installing the debian package of apple-kbd I made a PPA on Launchpad to package apple-kbd , so it's super easy to install it on your Debian or Ubuntu release. The plus of the Debian version compared to the plain sources is that you'll get a graphical dialog to configure your key style preferences. The dialog is also localized, only in French for the time being, but translators are welcome! Automatic installation for Ubuntu Natty Narwhal To install apple-kbd on Natty, you basically have to follow the instructions found on Launchpad. Just add the PPA to your list of available locations: sudo add-apt-repository ppa:damien-ciabrini/apple-kbd And once the PPA repository and its GPG key are imported, you can install the package as usual: sudo apt-get update sudo apt-get install apple-kbd The first time you'll install the package, you'll be asked some questions regarding the behaviour of the keyboard, i.e. , Insert key, PC keys emulation... At any time, you can reconfigure your keyboard by typing: sudo dpkg-reconfigure apple-kbd Manual installation for the others Oh damned, you don't run Natty (like me...)! No worries, you can still proceed the Old Way. Just edit /etc/apt/sources.list and add the following line at the end of the file: deb http://ppa.launchpad.net/damien-ciabrini/apple-kbd/ubuntu natty main And you're good to go! Resynchronize the index of available packages and install apple-kbd : sudo apt-get update sudo apt-get install apple-kbd Don't want a Debian package? Get the sources! The simplest way of getting the sources form GitHub is to download the latest apple-kbd archive: wget --no-check-certificate https://github.com/dciabrin/apple-kbd/tarball/apple-kbd-0.1 -Oapple-kbd-0.1.tar.gz tar zxvf apple-kbd-0.1.tar.gz But you can of course fork my git repository to play with it: git clone git://github.com/dciabrin/apple-kbd.git Have a look at README.rst for the details. Basically, you want to edit the file apple-kbd to configure your keyboard preferences (Insert key, PC keyboard emulation...). Then, you need the usual: make sudo make install I'm unfortunately a bit lazy, so contrary to the Debian package, you will need to reboot, or at least to re-plug the keyboard and restart the X server for your configuration to take effect. In a future version I will provide a command-line tool to force configuration changes to take effect on-the-fly. Is the support finished? I believe apple-kbd is really a milestone in the support of the Aluminium Keyboards. But of course, everything's perfectible. I actually see two important things that remain to do. The first one is to check whether the longstanding ISO-swapped-keys bug is really fixed for all the layouts. The second is to add a XKB geometry for the Wireless Aluminium Keyboards (the short ones). Plenty of work in perspective... So here it is, tell the world about apple-kbd , future will tell if this package is useful!","tags":"Code","title":"Support for Aluminium Keyboards packaged, code-named apple-kbd"},{"url":"http://damien.ciabrini.name/posts/2011/01/apple-aluminium-keyboards-with-udev-xorg-server-19.html","text":"It's been a year now since I published my support for Aluminium Keyboards. Since then, my XKB patches have been accepted in XKeyboardConfig 1.9, with a few modifications: The multimedia keys can always be accessed by combining Fxx with the 3rd level chooser (this was option alul3media in my original XKB patches) There is now a single XKB option alupckeys to emulate the behaviour of a PC keyboard, i.e. to enable PrintScreen, ScrollLock, SysReq and NumLock (options alupcfkeys and alupcnumlock in the original patches) Meanwhile, Xorg server 1.9 went stable, becoming more and more pervasive. As far as input hotplugging is concerned, this is a major revision for it dropped HAL in favor of udev : input discovery is achieved via udev and XKB settings for devices are fetched from the udev database. I have thus ported the support for the Aluminium Keyboards to udev. As before, a configuration file controls the XKB settings to apply, as well as the remapping of the \"fn\" key to \"insert\", if requested. Installing the udev-enabled support First, download the necessary udev rules and install them in whatever directory your distrib uses to store user rules. On Ubuntu, assuming that you downloaded the rules in your home directory, this gives: sudo cp $ HOME /95-keymap-apple-kdb.rules /etc/udev/rules.d Then, download the configuration file and install it in your distrib's configuration directory. On Ubuntu, this gives: sudo cp $ HOME /apple-kbd /etc/default The configuration file contains various key-value pairs that drive the behaviour of the Aluminium Keyboard. By default, the configuration enables the XKB option for PC-like mapping (PrintScreen, ScrollLock, Pause, NumLock) and maps the \"fn\" key to \"insert\". Comment out the relevant lines to disable any of those settings if necessary. There's a catch: what's your distrib? The udev-enabled support assumes one thing: that you are running xkeyboard-config 1.9 or above. Not all distribs are equal in this regard. A quick search shows that Arch, Gentoo, Fedora or openSUSE all ship a recent-enough xkeyboard-config. On the other hand, Debian is currently stuck with xkeyboard-config 1.8-2 (at least for unstable, I haven't checked experimental). The Ubuntu case is the most puzzling one. At the time of writing, Maverick and Natty ship xkeyboard-config 1.8-1ubuntu8, which is based on 1.8 stock plus additional important commits from the git repository. This includes my patches for the Aluminium Keyboard (!), but unfortunately only 6 patches out of 7 have been included (!?!). Consequently, the XKB support is currently broken for Ubuntu. I have filled bug 696232 in Launchpad to track this issue and check whether this was intended or not. Meanwhile, you can grab this XKB patch and try to apply it: sudo bash cd /usr/share/X11/xkb/rules patch -p0 --dry-run < $ HOME /xkb-data-1.8-evdev.patch If the patch applies successfully, you can proceed and apply it for real: patch -p0 < $ HOME /xkb-data-1.8-evdev.patch Steps to come With this updated support, Aluminium Keyboards work again under recent versions of the Xorg server, but there are still various improvements to think about. The next step is to package the support to make it more user-friendly. A package is definitely a good place to deal with other keyboard options, such as kernel settings for activating multimedia keys vs. function keys. On the XKB side, it would be necessary to perform a second pass to ensure that there are no missing or misplaced symbols on the 16 existing keymaps: ANSI, JIS and the 14 ISO layouts. Speaking of misplaced symbols: I am currently checking whether it's possible to come with a fully user-space, udev-based solution to the \"keys swapped\" issue that plague some owners of the ISO variants. I have some ideas, but this will be another post!","tags":"Code","title":"Apple Aluminium Keyboards with udev, Xorg server 1.9"},{"url":"http://damien.ciabrini.name/posts/2009/12/aluminium-keyboard-support-under-x11-all-models-all-oses.html","text":"I finally found the time to update my previous support for Aluminium Keyboard under Xorg, and take it to the Next Level (tm). The overall support is now much more polished. For you this means several things: I've implemented the XKB geometries of all variants of the long Aluminium Keyboard , be it ANSI (American), ISO (Internationnal) or JIS (Japanese)! And believe me, it's darned complicated to support JIS keyboard's dual layout without having access to the real hardware :D I've added support for base XKB rules, which means that the keyboard will now be properly configured on other OSes than Linux . I personally used OpenSolaris during my tests, but it should work equally well on FreeBSD , OpenBSD , and all their cousins! The keyboard support is now aware of the system-wide keyboard settings as found in Debian or Fedora for example. If you configured your system to default to Dvorak layout, the support will use it automatically! Installing the new support I'm short on details, but you can find a complete explanation for all these steps in a previous post . XKB Patch First of all, download this XKB patch and try to apply it on your XKB install in dry-run. For the sake of the example, I assume you downloaded the patch in your $HOME directory. sudo bash cd /usr/share/X11/xkb gunzip -cd $ HOME /applekbd-xkb-support.patch.gz | patch -p1 --dry-run If the patch applies successfuly, you can proceed and apply it for real: gunzip -cd $ HOME /applekbd-xkb-support.patch.gz | patch -p1 HAL support Well, even if HAL is meant to be replaced sooner or later by DeviceKit , that's the way to go for the time being. So I reworked the previous HAL support and split it in one fdi file to track your keyboard on your hardware, plus a script to configure XKB for Aluminium Keyboard and to remap the Fn key to Insert. To install it, first remove the fdi file from the previous support if necessary. Then, copy this new fdi file (which you have previously downloaded in your $HOME directory) in the relevant HAL directory. On my Ubuntu Karmic, this gives ( update: added missing chmod, thanks Patrick): sudo bash rm -f /usr/share/hal/fdi/policy/30user/10-apple-aluminium-kbd.fdi mkdir -p /usr/share/hal/fdi/policy/30user cp $ HOME /10-applekbd-xkb-settings.fdi /usr/share/hal/fdi/policy/30user Download (I assume in your $HOME directory) the new script for XKB setting , plus its associated configuration file . Then copy them respectively in HAL's installation directory and in the system-wide configuration directory. On my Ubuntu, ths gives: sudo bash cp $ HOME /applekbd-xkb-settings.sh /usr/lib/hal chmod +x /usr/lib/hal/applekbd-xkb-settings.sh cp $ HOME /applekbd-xkb-settings /etc/default You can tweak the configuration file /etc/default/applekbd-xkb-settings to enable the settings you want for your keyboard. By default, the Fn key is remapped to Insert. The XKB options can be configured there for system-wide setting, as explained in the configuration file itself. But it's more user-friendly to configure XKB in your preferred Desktop Environment (GNOME, KDE, XFCE... whatever). Enjoy! I'm particularly happy with my revised XKB geometries. A tedious work, but this time keys dimension and layout perfectly match the original hardware, whatever the model. I'm even more happy now that I discovered how Apple decided to implement their EISU and KANA keys on the JIS keyboard! If you are curious, have a look at file xkb/keycodes/machintosh in the patch, or read this post on Parallels' forum . The XKB patches are now ready for submission to the Xorg people (xkeyboard-config). The rest of the files are also clean enough to start providing .deb packages for this support! Maybe a good opportunity of learning PPA in LaunchPad :P","tags":"Code","title":"Aluminium Keyboard support under X11: all models, all OSes"},{"url":"http://damien.ciabrini.name/posts/2009/05/make-your-apple-aluminium-keyboard-really-work-under-linux-xorg.html","text":"Like many others, I've bought an Aluminium Keyboard for ~~its cool style~~ the smooth typing experience it provides. Mine is a wired version, ISO variant (international, 110-keys). It's not working 100% out-of-the-box under Linux, so this post explains what I did to make it happen: Supporting the additional keys (F13..F19) and geometry (physical layout) under X.org Making the keyboard auto-configured at X.org startup. No need to mess with xorg.conf! But wait, there's more. If you're accustomed to PC keyboards, you really need those ones too: Making this fn key located on top of the delete key behave like a regular PC keyboard: Insert! Making multimedia keys output Fxx symbols by default Making F13..F15 behave like those charmingly obsolete Scroll Lock..Print Screen keys Keeping the multimedia keys accessible when the fn key is remapped to Insert Prerequisite First, make sure you have installed all the packages below and that their versions are recent enough: xserver-xorg v1.5.2, X.org's hotplug-aware X server xserver-xorg-input-evdev v2.0.xx, evdev driver for input devices HAL v0.5.xx, the hardware abstraction layer daemon which gives hotplug information to the X server How the support works Install Go grab this patch and save it in your home directory; it contains the relevant XKB updates to support the keymap and the geometry of Apple Aluminium keyboard, ISO variant. It also defines two XKB options to make this keyboard behave more like a PC keyboard (more on that later). To install it, first pretend to apply the patch in the directory that holds the XKB data. On my Ubuntu, this gives: sudo bash cd /usr/share/X11/xkb gunzip -cd $ HOME /xkb-apple-aluminium-kdb-iso.patch.gz | patch -p1 --dry-run If the patch applies successfuly, you can proceed and apply it for real: gunzip -cd $ HOME /xkb-apple-aluminium-kdb-iso.patch.gz | patch -p1 Once you have the relevant XKB definition for your keyboard, you need to tell X.org to apply these settings automatically when it detects your keyboard. The following HAL fdi file makes the necessary voodoo (read: XKB settings) for you. Note that these settings do not preclude your system-wide XKB options. In order to install the fdi file I'm providing, just copy it in the HAL directory which holds user-defined policies for devices. On my Ubuntu, this directory is /usr/share/hal/fdi/policy/30user . You might need to create 30user if it doesn't exist. Test Now that you installed everything, restart HAL. For example, on a Debian-like distro: sudo /etc/init.d/hal restart Then log out from your current X session and start a new one. If everything went well, you should now be able to see the Aluminium Keyboard in your keyboard preferences application. The screenshots below show the result under GNOME: Make it a PC keyboard! The Insert key hack The fn key is not seen by X because its keycode (464) is greater than 255, which is not allowed in X11 protocol. But there is a trick: under Linux, you can modify the kernel scancode→keycode mapping of your evdev device! Just uncomment the two optional lines in the fdi file I'm providing to make the fn scancode (HID usage 0xff0003 on this keyboard) generate the Insert keycode (110) in userland and make Xorg happy :D For curious people: Initially (funny how these names look familiar if you read p.g.o ...), HAL's keycode remapping seems to have been designed with AT scancodes in mind, not HID usages. In order to override those ones, you must revert a special encoding performed for representing AT escape scancodes. In our case, you end up remapping usage 0xffdf83! Fxx keys enabled by default This one is not new. In order to boot with Fxx keys enabled, you must pass an option to the hid Linux module. On my Ubuntu, this can be done by updating modprobe options and rebuilding an initrd image. sudo bash echo \"options hid pb_fnmode=2\" >> /etc/modprobe.d/alukbd echo \"options hid_apple fnmode=2\" >> /etc/modprobe.d/alukbd update-initramfs -k `uname -r` -u Additional PC-like XKB options The XKB patch I'm providing defines two new XKB options: apple:alupcfkeys If you need to map F13..F15 to Scroll Lock..Print Screen keys (I won't judge you, I swear :P) apple:alul3media If you remap fn to Insert, this options allows you to access the multimedia keys is by typing 3rd-level chooser + Fxx key. I've mapped my 3rd-level chooser to the right Alt key (XKB option lv3:ralt_switch ) Naturally, the simplest way of using these XKB options is to enable them via your keyboard preferences application. For instance, GNOME users can find them in the Keyboard Layout Options: Conclusion My XKB and HAL settings provide complete support for your Aluminium Keyboard on Xorg Linux. However, the Insert key hack is probably not mainstream and ultimately should not land in a fdi file. It would be better to make a distro package such as \"enable PC-support on Aluminium Keyboard\". The XKB geometry implemented is for the ISO variant. if you have one of the other variant and like to throw it away, you know I'd be happy to add support for it, eheh :P","tags":"Code","title":"Make your Apple Aluminium Keyboard really work under Linux, X.org"},{"url":"http://damien.ciabrini.name/posts/2009/02/toolchainsh-is-amazing.html","text":"A few weeks ago, I finally upgraded my iPhone to firwmare 2.2.1. It was actually an utterly painless operation, thanks to the amazing toolchain.sh by the guys from iphonedevlinux . I remember in the 1.1.4 days, I had a hard time extracting the MacOS 10.5 SDK on Linux and compiling the openSDK on my Core2 Quad by following saurik's great instructions . It turns out that building an open SDK for firmware 2.2.1 is actually very simple: getting a copy of the phone's sysroot, building GCC, importing headers from the official iphone SDK, classdumping private frameworks... all these operations are now almost automatic thanks to toolchain.sh. The icing on the cake: those smart people from iphonedevlinux are friendly and reactive! Another good reason for sending them patches and using their script :)","tags":"Code","title":"Toolchain.sh is amazing!"},{"url":"http://damien.ciabrini.name/posts/2008/07/hello-mikmod.html","text":"As promised earlier, I've packaged an obligatory example of how to use the iPhone port of libmikmod which I've talked about recently. Go grab this tarball which implements a very simple \"Hello World!\": It shows how to play a module within a UIKit application. This is an adaptation of the skeleton program found in MikMod Documentation . It shows how to use the higher level sound API Celestial to control mikmod output. For instance, how to react to volume change events when iPhone buttons are pressed. What to do with this archive once you've extracted it? tar -zxf HelloMikMod.tar.gz cd HelloMikMod Simple! Modify the Makefile to set the location of the AudioQueue.h header, as well as the location where you've installed libmikmod. Once you're done, the makefile should look like: # directory where AudioQueue.h is located AQDIR = $( HOME ) /local/audioqueue # directory where MikMod is located MMDIR = $( HOME ) /local/mikmod-iphone # comment the following line when the previous settings are OK for you #$(error configure AudioQueue and Mikmod location in the Makefile first) Then, just build and install the app by typing: make scp -r HelloMikMod.app root@iphone:/Applications Where iphone stands for the hostname or the IP of your iPhone. Note that you will need either curl or wget installed or your machine so that the build process is able to download the module played in this example app (fortunately, one of those should always be available on MacOS X or on your favorite Linux distro). For your convenience, the HelloMikMod.app directory is standalone: it contains the app itself linked statically to libmikmod, a launcher descriptor for Springboard and the module to play. For my own pleasure, the mod played is Stardust Memories by Jester / Sanity, my all time favorite Amiga mod (see the compo World of Commodore ). This is only a simple example of how to use MikMod on iPhone. I've started implementing a more complex app that mimics the iPod interface for playing mods (Module DB, Screenshot of associated demos...). Now if only I could use Nectarine or Pouet.net DB to make some kind of systematic indexing available!! (sigh....)","tags":"Code","title":"Hello MikMod!"},{"url":"http://damien.ciabrini.name/posts/2008/06/mikmod-library-ported-to-iphone.html","text":"I've always been a big fan of old skool computer music, like chiptunes or demoscene music. Perhaps because they remind me the Good Old Days (tm) of my Amiga . Or perhaps for the same reason I like demoscene : real-time computer art! Because it's definitely cool, I've decided to port MikMod to the iPhone! We'll see later if it might be useful to someone else :) Compiling libmikmod Here are the steps to follow to build libmikmod for your iPhone or iPod Touch. First of all, make sure that you have the necessary header file from Apple, namely AudioQueue.h . This file is part of the AudioQueue framework, which is available in the MacOS X 10.5 SDK . This means that the official iPhone SDK is not required. Then, download the latest libmikmod-3.2.0-beta2 available on the MikMod homepage , as well as this patch for iPhone support . For simplicity, let's consider that both files will be downloaded in the same directory. Once you have them, extract the archive and apply the patch: tar -zxf libmikmod-3.2.0-beta2.tar.gz cd libmikmod-3.2.0-beta2 gunzip -cd ../iphone-drv-mikmod-3.2.0-beta2.patch.gz | patch -p1 Among other things, the patch modifies various Makefiles and the configure script, so we have to cleanly regenerate all the autotool-related files: aclocal automake autoconf Now let's set up the necessary environment variables to configure and build libmikmod. First, where to find the AudioQueue header and where to install libmikmod: export AQDIR= $ HOME /local/audioqueue export MMDIR= $ HOME /local/mikmod-iphone Make sure you are using absolute paths for the variables above. Then, let's set up some compilation flags and name the tools we'll use from the iPhone toolchain: export CFLAGS=\"-I $ AQDIR -DAVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER=\" export CPPFLAGS=\" $ CFLAGS \" export LDFLAGS=\"-framework AudioToolbox\" export CC=arm-apple-darwin-gcc export RANLIB=arm-apple-darwin-ranlib Okay, now it's time to let configure do its job: ./configure --enable-iphone --host=arm-apple-darwin --disable-oss --disable-esd --prefix= $ MMDIR We're almost done! But there's still a little quirk that must be addressed. The project is configured to build shared libraries, which for some reason refuse to link with the version of the open-source iPhone toolchain I use. To overcome this problem, you just need to patch the generated libtool configuration. Knowing no clever means to do so, I propose something like: sed -r -i 's/&#94;(allow_undefined_flag.*)\"/\\1 -Wl,-read_only_relocs,suppress\"/' libtool Phew, now we're done! Just type: make CFLAGS=\" $ CFLAGS \" make install And voila! a fresh libmikmod with support for your beloved iPhone or iPod Touch! Oh, by the way: the library comes in both static and dynamic flavor, so it should be pretty usable. Of course, the obligatory example will follow soon :P EDIT: the link to the patch was pointing to a plain file instead of a gzip one, fixed!","tags":"Code","title":"MikMod library ported to iPhone"},{"url":"http://damien.ciabrini.name/posts/2008/06/hello-world.html","text":"I'm opening this blog to share my bits of code, hacks or thoughts I have during the time I spend in front of my computer. That will be a great occasion for me to retrieve all the goodies laying in my attic and that I should take the time to package cleanly! Moreover, that will be a good way of talking about the cool things I work on nowadays... Okay, I know... it sounds so vague... but hey, it's only a Hello World after all :)","tags":"Misc","title":"Hello World!"}]}